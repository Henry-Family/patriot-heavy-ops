name: CI Tests

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_coverage:
        description: "Run coverage analysis"
        required: false
        default: false
        type: boolean

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast PR validation (no coverage for quick feedback)
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Run tests (no coverage)
        run: npm test -- --ci --passWithNoTests --maxWorkers=4

      - name: Run manual coverage (if requested)
        if: github.event.inputs.run_coverage == 'true'
        run: npm run test:coverage -- --ci --passWithNoTests --coverageDirectory=coverage

      - name: Upload manual coverage
        if: github.event.inputs.run_coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  # Full validation with coverage for main branch and releases
  main-validation:
    name: Main Branch Validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage -- --ci --passWithNoTests

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  # Release branch validation
  release-validation:
    name: Release Branch Validation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage -- --ci --passWithNoTests

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  # Fast feedback jobs that run in parallel
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

  # Unit tests split into parallel shards
  unit-tests:
    name: Unit Tests (Shard ${{ matrix.shard }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests (shard ${{ matrix.shard }})
        run: |
          set -o pipefail
          npm run test -- --ci --watchAll=false --shard=${{ matrix.shard }}/4 --maxWorkers=4 --coverageThreshold='{}' 2>&1 | tee test-output-${{ matrix.shard }}.log

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-shard-${{ matrix.shard }}
          path: test-output-${{ matrix.shard }}.log

  # Component/Integration tests
  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run component tests
        run: |
          set -o pipefail
          npm run test -- --ci --watchAll=false --testPathPatterns="components|hooks" --maxWorkers=4 --coverageThreshold='{}' 2>&1 | tee component-test-output.log

      - name: Upload component test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: component-test-logs
          path: component-test-output.log

  # API tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: |
          set -o pipefail
          npm run test -- --ci --watchAll=false --testPathPatterns="api" --maxWorkers=4 --coverageThreshold='{}' 2>&1 | tee api-test-output.log

      - name: Upload API test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-logs
          path: api-test-output.log

  # Build job (runs in parallel with tests)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/

  # Coverage collection with Jest native aggregation
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, api-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release' || github.event.inputs.run_coverage == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage with Jest
        run: |
          npm run test:coverage -- \
            --ci \
            --passWithNoTests \
            --coverageDirectory=coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # Integration tests (runs after unit tests pass)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, build]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          set -o pipefail

          # Initialize log file
          touch integration-output.log

          # Look for integration test files
          if find __tests__ -name "*integration*.test.*" -type f 2>/dev/null | grep -q .; then
            echo "Running integration tests..." | tee -a integration-output.log
            # Run integration tests using the main Jest config with pattern matching
            npm run test -- --ci --watchAll=false --testPathPatterns="integration" --maxWorkers=4 --coverage=false 2>&1 | tee -a integration-output.log
            test_exit_code=${PIPESTATUS[0]}
          else
            echo "No integration tests found. This is expected if integration tests haven't been implemented yet." | tee -a integration-output.log
            echo "Integration test setup completed successfully." | tee -a integration-output.log
            test_exit_code=0
          fi

          # Check if tests actually ran and passed
          if [ $test_exit_code -ne 0 ]; then
            echo "Integration tests failed with exit code $test_exit_code!" | tee -a integration-output.log
            exit 1
          fi

          echo "Integration tests completed successfully." | tee -a integration-output.log

      - name: Upload integration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: integration-output.log

  # Status check job (required for branch protection)
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs:
      [
        pr-validation,
        main-validation,
        release-validation,
        lint,
        unit-tests,
        component-tests,
        api-tests,
        build,
        integration,
        coverage,
      ]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          # Function to check if a job result is acceptable (success or skipped)
          is_job_ok() {
            local result="$1"
            [[ "$result" == "success" || "$result" == "skipped" || "$result" == "cancelled" ]]
          }

          # Check each job result
          pr_validation_ok=$(is_job_ok "${{ needs.pr-validation.result }}" && echo "true" || echo "false")
          main_validation_ok=$(is_job_ok "${{ needs.main-validation.result }}" && echo "true" || echo "false")
          release_validation_ok=$(is_job_ok "${{ needs.release-validation.result }}" && echo "true" || echo "false")
          lint_ok=$(is_job_ok "${{ needs.lint.result }}" && echo "true" || echo "false")
          unit_tests_ok=$(is_job_ok "${{ needs.unit-tests.result }}" && echo "true" || echo "false")
          component_tests_ok=$(is_job_ok "${{ needs.component-tests.result }}" && echo "true" || echo "false")
          api_tests_ok=$(is_job_ok "${{ needs.api-tests.result }}" && echo "true" || echo "false")
          build_ok=$(is_job_ok "${{ needs.build.result }}" && echo "true" || echo "false")
          integration_ok=$(is_job_ok "${{ needs.integration.result }}" && echo "true" || echo "false")
          coverage_ok=$(is_job_ok "${{ needs.coverage.result }}" && echo "true" || echo "false")

          echo "Job Results:"
          echo "  pr-validation: ${{ needs.pr-validation.result }} (ok: $pr_validation_ok)"
          echo "  main-validation: ${{ needs.main-validation.result }} (ok: $main_validation_ok)"
          echo "  release-validation: ${{ needs.release-validation.result }} (ok: $release_validation_ok)"
          echo "  lint: ${{ needs.lint.result }} (ok: $lint_ok)"
          echo "  unit-tests: ${{ needs.unit-tests.result }} (ok: $unit_tests_ok)"
          echo "  component-tests: ${{ needs.component-tests.result }} (ok: $component_tests_ok)"
          echo "  api-tests: ${{ needs.api-tests.result }} (ok: $api_tests_ok)"
          echo "  build: ${{ needs.build.result }} (ok: $build_ok)"
          echo "  integration: ${{ needs.integration.result }} (ok: $integration_ok)"
          echo "  coverage: ${{ needs.coverage.result }} (ok: $coverage_ok)"

          if [[ "$pr_validation_ok" == "true" && "$main_validation_ok" == "true" && "$release_validation_ok" == "true" && "$lint_ok" == "true" && "$unit_tests_ok" == "true" && "$component_tests_ok" == "true" && "$api_tests_ok" == "true" && "$build_ok" == "true" && "$integration_ok" == "true" && "$coverage_ok" == "true" ]]; then
            echo "All CI checks passed!"
            exit 0
          else
            echo "Some CI checks failed!"
            exit 1
          fi

      - name: Post failure summary on PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobs = {
              "pr-validation": "${{ needs.pr-validation.result }}",
              "main-validation": "${{ needs.main-validation.result }}",
              "release-validation": "${{ needs.release-validation.result }}",
              lint: "${{ needs.lint.result }}",
              "unit-tests": "${{ needs.unit-tests.result }}",
              "component-tests": "${{ needs.component-tests.result }}",
              "api-tests": "${{ needs.api-tests.result }}",
              build: "${{ needs.build.result }}",
              integration: "${{ needs.integration.result }}",
              coverage: "${{ needs.coverage.result }}"
            };

            const failed = Object.entries(jobs)
              .filter(([_, status]) => status === 'failure')
              .map(([job, _]) => job);

            const cancelled = Object.entries(jobs)
              .filter(([_, status]) => status === 'cancelled')
              .map(([job, _]) => job);

            let body = '🚨 **CI Pipeline Failed**\n\n';

            if (failed.length > 0) {
              body += `**Failed Jobs:** ${failed.join(', ')}\n`;
            }

            if (cancelled.length > 0) {
              body += `**Cancelled Jobs:** ${cancelled.join(', ')}\n`;
            }

            body += `\nCheck the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;

            const issue_number = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body
            });
