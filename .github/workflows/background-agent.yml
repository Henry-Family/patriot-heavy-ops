name: Background Agent

on:
  issue_comment:
    types: [created]
  status:
  check_run:
    types: [completed]
  # Monitor workflow completions for log analysis
  workflow_run:
    workflows: ["CI Tests"]
    types: [completed]

jobs:
  # Analyze CI/CD workflow failures and check comment resolution
  analyze-failures:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          echo "GITHUB_ACCESS_TOKEN=${{ secrets.MULTI_REPO_PAT || github.token }}" >> .env.local
          echo "NODE_ENV=production" >> .env.local
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.SAM_PAT_EXP_09_04_2026 }}

      - name: Check for unresolved review comments
        id: check-comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Find associated PR for this workflow run
            const { data: prs } = await github.rest.pulls.list({
              ...context.repo,
              state: 'open',
              head: `${context.repo.owner}:${{ github.event.workflow_run.head_branch }}`
            });

            if (prs.length === 0) {
              console.log("No open PR found for branch ${{ github.event.workflow_run.head_branch }}, skipping comment check");
              return { skip: true };
            }

            const prNumber = prs[0].number;
            console.log(`Found PR #${prNumber} for workflow run`);

            // Check for unresolved review comments
            const { data: reviews } = await github.rest.pulls.listReviewComments({
              ...context.repo,
              pull_number: prNumber,
              per_page: 100
            });

            // GitHub marks comments as "in_reply_to_id" when resolved; keep only root unresolved
            const unresolved = reviews.filter(r => r.in_reply_to_id === null);

            if (unresolved.length > 0) {
              core.setFailed(`‚ùå ${unresolved.length} unresolved comments remain.`);
              return { skip: true, pr_number: prNumber, unresolved_comments: unresolved.length };
            } else {
              console.log("‚úÖ All review comments resolved.");
              return { skip: false, pr_number: prNumber };
            }

      - name: Analyze workflow failure logs
        if: github.event.workflow_run.conclusion == 'failure'
        run: |
          echo "üîç Analyzing failed workflow: ${{ github.event.workflow_run.name }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"

          # Find associated PR for this workflow run
          PR_NUMBER=$(gh pr list --state open --json number,headRefName --jq '.[] | select(.headRefName == "${{ github.event.workflow_run.head_branch }}") | .number' | head -1)

          if [ -z "$PR_NUMBER" ]; then
            echo "No open PR found for branch ${{ github.event.workflow_run.head_branch }}, skipping"
            exit 0
          fi

          echo "Found PR #$PR_NUMBER for failed workflow"

          # Use enhanced log analysis
          npx tsx scripts/todo-cli.ts analyze-workflow ${{ github.event.workflow_run.id }} $PR_NUMBER
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.MULTI_REPO_PAT || github.token }}
          GH_TOKEN: ${{ secrets.MULTI_REPO_PAT || github.token }}

      - name: Upload failure analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failure-analysis-${{ github.event.workflow_run.id }}
          path: .todos.json
          retention-days: 7

  # Monitor Copilot comments and PR events
  background-agent:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request || github.event_name == 'issue_comment' || github.event_name == 'status' || github.event_name == 'check_run'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          echo "GITHUB_ACCESS_TOKEN=${{ secrets.MULTI_REPO_PAT || github.token }}" >> .env.local
          echo "NODE_ENV=production" >> .env.local
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.SAM_PAT_EXP_09_04_2026 || github.token }}

      - name: Trigger Background Agent
        run: |
          # Get PR number from context
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            # Extract PR number from issue if it's a PR
            if [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
              PR_NUMBER=${{ github.event.issue.number }}
            else
              echo "Not a PR comment, skipping"
              exit 0
            fi
          elif [ "${{ github.event_name }}" = "status" ] || [ "${{ github.event_name }}" = "check_run" ]; then
            # For status/check events, find associated PR
            PR_NUMBER=$(gh pr list --state open --json number,headRefName --jq '.[] | select(.headRefName == "${{ github.ref_name }}") | .number' | head -1)
            if [ -z "$PR_NUMBER" ]; then
              echo "No open PR found for this ref, skipping"
              exit 0
            fi
          fi

          echo "Processing PR #$PR_NUMBER with Background Agent..."

          # Use DoD-enabled version for status/check events (when CI might be passing)
          if [ "${{ github.event_name }}" = "status" ] || [ "${{ github.event_name }}" = "check_run" ]; then
            echo "Using Definition of Done checks for status/check event..."
            npx tsx scripts/todo-cli.ts github-dod $PR_NUMBER
          else
            npx tsx scripts/todo-cli.ts github $PR_NUMBER
          fi
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.MULTI_REPO_PAT || github.token }}
          GH_TOKEN: ${{ secrets.MULTI_REPO_PAT || github.token }}

      - name: Check for new todos
        run: |
          if [ -f ".todos.json" ]; then
            echo "üìã Background Agent created todos:"
            cat .todos.json | jq -r '.[] | select(.status == "pending") | "  - " + .content'
          else
            echo "No todos file found"
          fi

      - name: Upload todos artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: todos-artifact
          path: .todos.json
          retention-days: 7

      - name: Comment on PR with results
        if: github.event.pull_request || github.event_name == 'issue_comment' || github.event_name == 'status' || github.event_name == 'check_run'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## ü§ñ Background Agent Analysis\n\n';

            try {
              if (fs.existsSync('.todos.json')) {
                const todos = JSON.parse(fs.readFileSync('.todos.json', 'utf8'));
                const pendingTodos = todos.filter(t => t.status === 'pending');
                
                if (pendingTodos.length > 0) {
                  comment += `Found **${pendingTodos.length}** issues to address:\n\n`;
                  pendingTodos.forEach((todo, index) => {
                    const priority = todo.priority === 'critical' ? 'üî¥' : 
                                   todo.priority === 'high' ? 'üü†' : 
                                   todo.priority === 'medium' ? 'üü°' : 'üü¢';
                    comment += `${index + 1}. ${priority} **${todo.priority.toUpperCase()}**: ${todo.content}\n`;
                    if (todo.suggestedFix) {
                      comment += `   üí° **Fix**: ${todo.suggestedFix}\n`;
                    }
                    if (todo.files && todo.files.length > 0) {
                      comment += `   üìÅ **Files**: ${todo.files.join(', ')}\n`;
                    }
                    comment += '\n';
                  });
                  
                  comment += '---\n';
                  comment += 'ü§ñ *Background Agent has created todos for these issues. Use `npm run todo list` to see all todos and `npm run todo next` to get the next item to work on.*';
                } else {
                  comment += '‚úÖ No new issues detected. All GitHub Copilot comments have been processed.';
                }
              } else {
                comment += '‚ÑπÔ∏è No todos file found. Background Agent may not have detected any issues.';
              }
            } catch (error) {
              comment += `‚ùå Error processing todos: ${error.message}`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
