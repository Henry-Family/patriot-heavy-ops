<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="58" failures="0" errors="0" time="0.646">
  <testsuite name="ServiceRequestService" errors="0" failures="0" skipped="0" timestamp="2025-09-24T23:16:02" time="0.212" tests="58">
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for HALF_DAY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for HALF_DAY correctly" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for FULL_DAY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for FULL_DAY correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for MULTI_DAY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for MULTI_DAY correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for WEEKLY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for WEEKLY correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should handle single unit durations" name="ServiceRequestService calculateTotalHours should handle single unit durations" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should reject invalid duration values" name="ServiceRequestService calculateTotalHours should reject invalid duration values" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should reject negative duration values" name="ServiceRequestService calculateTotalHours should reject negative duration values" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should reject invalid duration types" name="ServiceRequestService calculateTotalHours should reject invalid duration types" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should validate required parameters" name="ServiceRequestService calculateTotalHours should validate required parameters" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should log operations" name="ServiceRequestService calculateTotalHours should log operations" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for single HALF_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for single HALF_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for multiple HALF_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for multiple HALF_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for single FULL_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for single FULL_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for multiple FULL_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for multiple FULL_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for MULTI_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for MULTI_DAY" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for single WEEKLY" name="ServiceRequestService getDurationDisplayText should generate display text for single WEEKLY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for multiple WEEKLY" name="ServiceRequestService getDurationDisplayText should generate display text for multiple WEEKLY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should reject invalid duration values" name="ServiceRequestService getDurationDisplayText should reject invalid duration values" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should reject invalid duration types" name="ServiceRequestService getDurationDisplayText should reject invalid duration types" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should return correct fee for WE_HANDLE_IT" name="ServiceRequestService calculateTransportFee should return correct fee for WE_HANDLE_IT" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should return correct fee for YOU_HANDLE_IT" name="ServiceRequestService calculateTransportFee should return correct fee for YOU_HANDLE_IT" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should reject invalid transport options" name="ServiceRequestService calculateTransportFee should reject invalid transport options" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should validate required parameters" name="ServiceRequestService calculateTransportFee should validate required parameters" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate hourly rate correctly" name="ServiceRequestService calculateBaseCost should calculate hourly rate correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate half-day rate correctly" name="ServiceRequestService calculateBaseCost should calculate half-day rate correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate daily rate correctly" name="ServiceRequestService calculateBaseCost should calculate daily rate correctly" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate weekly rate correctly" name="ServiceRequestService calculateBaseCost should calculate weekly rate correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should apply equipment multipliers correctly" name="ServiceRequestService calculateBaseCost should apply equipment multipliers correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should round to 2 decimal places" name="ServiceRequestService calculateBaseCost should round to 2 decimal places" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should reject invalid inputs" name="ServiceRequestService calculateBaseCost should reject invalid inputs" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should reject invalid equipment categories" name="ServiceRequestService calculateBaseCost should reject invalid equipment categories" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should reject invalid rate types" name="ServiceRequestService calculateBaseCost should reject invalid rate types" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should calculate complete pricing correctly" name="ServiceRequestService calculateServiceRequestPricing should calculate complete pricing correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should handle complex equipment multipliers" name="ServiceRequestService calculateServiceRequestPricing should handle complex equipment multipliers" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should handle YOU_HANDLE_IT transport" name="ServiceRequestService calculateServiceRequestPricing should handle YOU_HANDLE_IT transport" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should propagate calculation errors" name="ServiceRequestService calculateServiceRequestPricing should propagate calculation errors" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should validate initial status transition" name="ServiceRequestService validateStatusTransition should validate initial status transition" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should reject invalid initial status" name="ServiceRequestService validateStatusTransition should reject invalid initial status" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should validate valid status transitions" name="ServiceRequestService validateStatusTransition should validate valid status transitions" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should reject invalid status transitions" name="ServiceRequestService validateStatusTransition should reject invalid status transitions" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should handle terminal statuses" name="ServiceRequestService validateStatusTransition should handle terminal statuses" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should handle invalid source status" name="ServiceRequestService validateStatusTransition should handle invalid source status" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should validate required parameters" name="ServiceRequestService validateStatusTransition should validate required parameters" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should return valid next statuses for SUBMITTED" name="ServiceRequestService getValidNextStatuses should return valid next statuses for SUBMITTED" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should return valid next statuses for UNDER_REVIEW" name="ServiceRequestService getValidNextStatuses should return valid next statuses for UNDER_REVIEW" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should return empty array for terminal statuses" name="ServiceRequestService getValidNextStatuses should return empty array for terminal statuses" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should reject invalid status" name="ServiceRequestService getValidNextStatuses should reject invalid status" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should validate correct business rules" name="ServiceRequestService validateServiceRequestBusinessRules should validate correct business rules" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject past start dates" name="ServiceRequestService validateServiceRequestBusinessRules should reject past start dates" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject end date before start date" name="ServiceRequestService validateServiceRequestBusinessRules should reject end date before start date" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject excessive weekly durations" name="ServiceRequestService validateServiceRequestBusinessRules should reject excessive weekly durations" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject excessive multi-day durations" name="ServiceRequestService validateServiceRequestBusinessRules should reject excessive multi-day durations" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject excessive daily durations" name="ServiceRequestService validateServiceRequestBusinessRules should reject excessive daily durations" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should handle multiple validation errors" name="ServiceRequestService validateServiceRequestBusinessRules should handle multiple validation errors" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should handle missing end date" name="ServiceRequestService validateServiceRequestBusinessRules should handle missing end date" time="0">
    </testcase>
    <testcase classname="ServiceRequestService service integration should maintain service name" name="ServiceRequestService service integration should maintain service name" time="0">
    </testcase>
    <testcase classname="ServiceRequestService service integration should log all operations" name="ServiceRequestService service integration should log all operations" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService service integration should handle edge cases gracefully" name="ServiceRequestService service integration should handle edge cases gracefully" time="0">
    </testcase>
  </testsuite>
</testsuites>