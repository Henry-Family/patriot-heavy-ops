<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="918" failures="10" errors="0" time="4.186">
  <testsuite name="Dashboard API Routes" errors="0" failures="10" skipped="0" timestamp="2025-09-26T02:11:50" time="0.497" tests="17">
    <testcase classname="Dashboard API Routes GET /api/dashboard/user should return user dashboard data for authenticated user" name="Dashboard API Routes GET /api/dashboard/user should return user dashboard data for authenticated user" time="0.012">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 422
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:72:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/user should return 401 for unauthenticated request" name="Dashboard API Routes GET /api/dashboard/user should return 401 for unauthenticated request" time="0.002">
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/user should validate query parameters" name="Dashboard API Routes GET /api/dashboard/user should validate query parameters" time="0.002">
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/user should handle service errors gracefully" name="Dashboard API Routes GET /api/dashboard/user should handle service errors gracefully" time="0">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 500
Received: 422
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:134:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/operator should return operator dashboard data for operator user" name="Dashboard API Routes GET /api/dashboard/operator should return operator dashboard data for operator user" time="0.001">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 422
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:164:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/operator should return 403 for non-operator user" name="Dashboard API Routes GET /api/dashboard/operator should return 403 for non-operator user" time="0">
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/operator should allow admin access to operator endpoint" name="Dashboard API Routes GET /api/dashboard/operator should allow admin access to operator endpoint" time="0.003">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 422
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:207:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/manager should return manager dashboard data with date range" name="Dashboard API Routes GET /api/dashboard/manager should return manager dashboard data with date range" time="0.027">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 500
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:239:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/manager should validate date range parameters" name="Dashboard API Routes GET /api/dashboard/manager should validate date range parameters" time="0.005">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 422
Received: 500
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:269:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/manager should return 403 for non-manager user" name="Dashboard API Routes GET /api/dashboard/manager should return 403 for non-manager user" time="0.001">
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/admin should return admin dashboard data with security headers" name="Dashboard API Routes GET /api/dashboard/admin should return admin dashboard data with security headers" time="0.004">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 500
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:313:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/admin should return 403 for non-admin user" name="Dashboard API Routes GET /api/dashboard/admin should return 403 for non-admin user" time="0.001">
    </testcase>
    <testcase classname="Dashboard API Routes GET /api/dashboard/admin should use shortest cache TTL for admin data" name="Dashboard API Routes GET /api/dashboard/admin should use shortest cache TTL for admin data" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 500
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:350:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes Mobile JWT Compatibility should work with JWT tokens across all endpoints" name="Dashboard API Routes Mobile JWT Compatibility should work with JWT tokens across all endpoints" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 422
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:386:33)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes Mobile JWT Compatibility should handle caching parameters for mobile apps" name="Dashboard API Routes Mobile JWT Compatibility should handle caching parameters for mobile apps" time="0">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 422
    at Object.toBe (/Users/samhenry/patriot-heavy-ops/patriot-heavy-ops/__tests__/api/dashboard/dashboard-api-routes.test.ts:411:31)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Dashboard API Routes Error Handling should handle middleware Response errors" name="Dashboard API Routes Error Handling should handle middleware Response errors" time="0.001">
    </testcase>
    <testcase classname="Dashboard API Routes Error Handling should handle unexpected errors" name="Dashboard API Routes Error Handling should handle unexpected errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ServiceRequestCreateButton" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:51" time="0.506" tests="22">
    <testcase classname="ServiceRequestCreateButton Button Rendering should render the create button with correct text and icon" name="ServiceRequestCreateButton Button Rendering should render the create button with correct text and icon" time="0.057">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Rendering should render with custom className" name="ServiceRequestCreateButton Button Rendering should render with custom className" time="0.007">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Rendering should render with custom variant" name="ServiceRequestCreateButton Button Rendering should render with custom variant" time="0.006">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Rendering should accept additional button props" name="ServiceRequestCreateButton Button Rendering should accept additional button props" time="0.004">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Interaction should navigate to create page when clicked" name="ServiceRequestCreateButton Button Interaction should navigate to create page when clicked" time="0.033">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Interaction should show loading state when clicked" name="ServiceRequestCreateButton Button Interaction should show loading state when clicked" time="0.024">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Interaction should disable button during loading" name="ServiceRequestCreateButton Button Interaction should disable button during loading" time="0.012">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button Interaction should show spinner icon during loading" name="ServiceRequestCreateButton Button Interaction should show spinner icon during loading" time="0.022">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Error Handling should show error toast when navigation fails" name="ServiceRequestCreateButton Error Handling should show error toast when navigation fails" time="0.016">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Error Handling should handle different types of navigation errors" name="ServiceRequestCreateButton Error Handling should handle different types of navigation errors" time="0.063">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button States should maintain loading state until navigation completes" name="ServiceRequestCreateButton Button States should maintain loading state until navigation completes" time="0.017">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Button States should not allow multiple clicks during loading" name="ServiceRequestCreateButton Button States should not allow multiple clicks during loading" time="0.026">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Accessibility should have proper button semantics" name="ServiceRequestCreateButton Accessibility should have proper button semantics" time="0.005">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Accessibility should indicate loading state to screen readers" name="ServiceRequestCreateButton Accessibility should indicate loading state to screen readers" time="0.012">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Accessibility should maintain focus management" name="ServiceRequestCreateButton Accessibility should maintain focus management" time="0.013">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Icon Display should show add icon when not loading" name="ServiceRequestCreateButton Icon Display should show add icon when not loading" time="0.003">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Icon Display should switch to spinner icon when loading" name="ServiceRequestCreateButton Icon Display should switch to spinner icon when loading" time="0.012">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Component Variants should apply default variant styling" name="ServiceRequestCreateButton Component Variants should apply default variant styling" time="0.004">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Component Variants should apply custom variant styling" name="ServiceRequestCreateButton Component Variants should apply custom variant styling" time="0.002">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Component Variants should combine variant with loading classes" name="ServiceRequestCreateButton Component Variants should combine variant with loading classes" time="0.014">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Edge Cases should handle undefined router push result" name="ServiceRequestCreateButton Edge Cases should handle undefined router push result" time="0.015">
    </testcase>
    <testcase classname="ServiceRequestCreateButton Edge Cases should handle router push returning true" name="ServiceRequestCreateButton Edge Cases should handle router push returning true" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="useServiceRequestForm" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:50" time="1.096" tests="8">
    <testcase classname="useServiceRequestForm should initialize with default form values" name="useServiceRequestForm should initialize with default form values" time="0.02">
    </testcase>
    <testcase classname="useServiceRequestForm should update total hours when duration changes" name="useServiceRequestForm should update total hours when duration changes" time="0.006">
    </testcase>
    <testcase classname="useServiceRequestForm should handle job site input change and trigger address search" name="useServiceRequestForm should handle job site input change and trigger address search" time="0.32">
    </testcase>
    <testcase classname="useServiceRequestForm should handle address selection" name="useServiceRequestForm should handle address selection" time="0.003">
    </testcase>
    <testcase classname="useServiceRequestForm should handle geocoding service errors gracefully" name="useServiceRequestForm should handle geocoding service errors gracefully" time="0.318">
    </testcase>
    <testcase classname="useServiceRequestForm should submit form successfully" name="useServiceRequestForm should submit form successfully" time="0.003">
    </testcase>
    <testcase classname="useServiceRequestForm should handle form submission errors" name="useServiceRequestForm should handle form submission errors" time="0.003">
    </testcase>
    <testcase classname="useServiceRequestForm should handle network errors" name="useServiceRequestForm should handle network errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useOperatorApplicationForm" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:50" time="1.159" tests="10">
    <testcase classname="useOperatorApplicationForm should initialize with default form values" name="useOperatorApplicationForm should initialize with default form values" time="0.026">
    </testcase>
    <testcase classname="useOperatorApplicationForm should handle input change and trigger address search" name="useOperatorApplicationForm should handle input change and trigger address search" time="0.324">
    </testcase>
    <testcase classname="useOperatorApplicationForm should not search for addresses with less than 3 characters" name="useOperatorApplicationForm should not search for addresses with less than 3 characters" time="0.004">
    </testcase>
    <testcase classname="useOperatorApplicationForm should handle address selection" name="useOperatorApplicationForm should handle address selection" time="0.001">
    </testcase>
    <testcase classname="useOperatorApplicationForm should handle geocoding API errors gracefully" name="useOperatorApplicationForm should handle geocoding API errors gracefully" time="0.318">
    </testcase>
    <testcase classname="useOperatorApplicationForm should handle suggestions blur with delay" name="useOperatorApplicationForm should handle suggestions blur with delay" time="0.003">
    </testcase>
    <testcase classname="useOperatorApplicationForm should submit form successfully" name="useOperatorApplicationForm should submit form successfully" time="0.002">
    </testcase>
    <testcase classname="useOperatorApplicationForm should handle form submission errors" name="useOperatorApplicationForm should handle form submission errors" time="0.002">
    </testcase>
    <testcase classname="useOperatorApplicationForm should handle network errors during submission" name="useOperatorApplicationForm should handle network errors during submission" time="0.004">
    </testcase>
    <testcase classname="useOperatorApplicationForm should set loading states correctly during submission" name="useOperatorApplicationForm should set loading states correctly during submission" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="Utility Functions" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:51" time="0.284" tests="33">
    <testcase classname="Utility Functions cn function (className merger) should merge simple class names" name="Utility Functions cn function (className merger) should merge simple class names" time="0.007">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle conditional classes" name="Utility Functions cn function (className merger) should handle conditional classes" time="0.001">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should merge conflicting Tailwind classes correctly" name="Utility Functions cn function (className merger) should merge conflicting Tailwind classes correctly" time="0.003">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle arrays of classes" name="Utility Functions cn function (className merger) should handle arrays of classes" time="0.001">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle objects with conditional classes" name="Utility Functions cn function (className merger) should handle objects with conditional classes" time="0">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle mixed input types" name="Utility Functions cn function (className merger) should handle mixed input types" time="0.005">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle empty inputs" name="Utility Functions cn function (className merger) should handle empty inputs" time="0.001">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle complex Tailwind class conflicts" name="Utility Functions cn function (className merger) should handle complex Tailwind class conflicts" time="0.001">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should preserve non-conflicting classes" name="Utility Functions cn function (className merger) should preserve non-conflicting classes" time="0">
    </testcase>
    <testcase classname="Utility Functions cn function (className merger) should handle whitespace correctly" name="Utility Functions cn function (className merger) should handle whitespace correctly" time="0">
    </testcase>
    <testcase classname="Utility Functions formatDate function should format date strings correctly" name="Utility Functions formatDate function should format date strings correctly" time="0.001">
    </testcase>
    <testcase classname="Utility Functions formatDate function should format timestamp numbers correctly" name="Utility Functions formatDate function should format timestamp numbers correctly" time="0">
    </testcase>
    <testcase classname="Utility Functions formatDate function should handle ISO date strings" name="Utility Functions formatDate function should handle ISO date strings" time="0">
    </testcase>
    <testcase classname="Utility Functions formatDate function should handle various date string formats" name="Utility Functions formatDate function should handle various date string formats" time="0.001">
    </testcase>
    <testcase classname="Utility Functions formatDate function should handle edge case dates" name="Utility Functions formatDate function should handle edge case dates" time="0.001">
    </testcase>
    <testcase classname="Utility Functions formatDate function should handle invalid dates gracefully" name="Utility Functions formatDate function should handle invalid dates gracefully" time="0.001">
    </testcase>
    <testcase classname="Utility Functions formatDate function should use correct locale and format options" name="Utility Functions formatDate function should use correct locale and format options" time="0.001">
    </testcase>
    <testcase classname="Utility Functions formatDate function should handle different numeric inputs" name="Utility Functions formatDate function should handle different numeric inputs" time="0.001">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should create absolute URLs with base URL" name="Utility Functions absoluteUrl function should create absolute URLs with base URL" time="0.001">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should handle paths without leading slash by adding one" name="Utility Functions absoluteUrl function should handle paths without leading slash by adding one" time="0">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should handle empty and root paths" name="Utility Functions absoluteUrl function should handle empty and root paths" time="0">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should handle paths with query parameters" name="Utility Functions absoluteUrl function should handle paths with query parameters" time="0">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should handle paths with fragments" name="Utility Functions absoluteUrl function should handle paths with fragments" time="0">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should handle complex paths" name="Utility Functions absoluteUrl function should handle complex paths" time="0">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should handle special characters in paths" name="Utility Functions absoluteUrl function should handle special characters in paths" time="0">
    </testcase>
    <testcase classname="Utility Functions absoluteUrl function should not double-encode already encoded paths" name="Utility Functions absoluteUrl function should not double-encode already encoded paths" time="0">
    </testcase>
    <testcase classname="Utility Functions integration tests should work together in realistic scenarios" name="Utility Functions integration tests should work together in realistic scenarios" time="0.111">
    </testcase>
    <testcase classname="Utility Functions integration tests should handle edge cases in combination" name="Utility Functions integration tests should handle edge cases in combination" time="0.001">
    </testcase>
    <testcase classname="Utility Functions performance and memory should handle large numbers of class names efficiently" name="Utility Functions performance and memory should handle large numbers of class names efficiently" time="0.001">
    </testcase>
    <testcase classname="Utility Functions performance and memory should handle repeated calls without memory leaks" name="Utility Functions performance and memory should handle repeated calls without memory leaks" time="0.078">
    </testcase>
    <testcase classname="Utility Functions type safety and validation should handle various input types for cn" name="Utility Functions type safety and validation should handle various input types for cn" time="0.005">
    </testcase>
    <testcase classname="Utility Functions type safety and validation should handle various input types for formatDate" name="Utility Functions type safety and validation should handle various input types for formatDate" time="0">
    </testcase>
    <testcase classname="Utility Functions type safety and validation should handle various input types for absoluteUrl" name="Utility Functions type safety and validation should handle various input types for absoluteUrl" time="0">
    </testcase>
  </testsuite>
  <testsuite name="/api/auth/mobile/login" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.154" tests="14">
    <testcase classname="/api/auth/mobile/login POST should successfully login with valid credentials" name="/api/auth/mobile/login POST should successfully login with valid credentials" time="0.032">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should return 401 for invalid email" name="/api/auth/mobile/login POST should return 401 for invalid email" time="0.019">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should return 401 for user without password" name="/api/auth/mobile/login POST should return 401 for user without password" time="0.014">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should return 401 for invalid password" name="/api/auth/mobile/login POST should return 401 for invalid password" time="0.011">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should return 400 for invalid request data" name="/api/auth/mobile/login POST should return 400 for invalid request data" time="0.003">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should return 400 for missing email" name="/api/auth/mobile/login POST should return 400 for missing email" time="0.002">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should return 400 for missing password" name="/api/auth/mobile/login POST should return 400 for missing password" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should handle database errors gracefully" name="/api/auth/mobile/login POST should handle database errors gracefully" time="0.009">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should handle malformed JSON gracefully" name="/api/auth/mobile/login POST should handle malformed JSON gracefully" time="0.002">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should apply rate limiting" name="/api/auth/mobile/login POST should apply rate limiting" time="0">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should normalize email to lowercase" name="/api/auth/mobile/login POST should normalize email to lowercase" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should generate tokens with correct payload" name="/api/auth/mobile/login POST should generate tokens with correct payload" time="0.003">
    </testcase>
    <testcase classname="/api/auth/mobile/login POST should handle user with no role" name="/api/auth/mobile/login POST should handle user with no role" time="0.002">
    </testcase>
    <testcase classname="/api/auth/mobile/login GET should return 405 Method Not Allowed" name="/api/auth/mobile/login GET should return 405 Method Not Allowed" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="OperatorApplicationForm Component" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:51" time="0.554" tests="17">
    <testcase classname="OperatorApplicationForm Component Component Rendering should render the operator application form" name="OperatorApplicationForm Component Component Rendering should render the operator application form" time="0.166">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Component Rendering should have proper form structure and accessibility" name="OperatorApplicationForm Component Component Rendering should have proper form structure and accessibility" time="0.012">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Component Rendering should render with custom className" name="OperatorApplicationForm Component Component Rendering should render with custom className" time="0.003">
    </testcase>
    <testcase classname="OperatorApplicationForm Component User Interactions should call hook&apos;s handleInputChange when location input changes" name="OperatorApplicationForm Component User Interactions should call hook&apos;s handleInputChange when location input changes" time="0.053">
    </testcase>
    <testcase classname="OperatorApplicationForm Component User Interactions should call form submission handler when form is submitted" name="OperatorApplicationForm Component User Interactions should call form submission handler when form is submitted" time="0.022">
    </testcase>
    <testcase classname="OperatorApplicationForm Component User Interactions should call handleSuggestionsBlur when input loses focus" name="OperatorApplicationForm Component User Interactions should call handleSuggestionsBlur when input loses focus" time="0.024">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Loading States should display loading state when saving" name="OperatorApplicationForm Component Loading States should display loading state when saving" time="0.009">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Loading States should display loading spinner when saving" name="OperatorApplicationForm Component Loading States should display loading spinner when saving" time="0.01">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Loading States should show loading spinner when searching addresses" name="OperatorApplicationForm Component Loading States should show loading spinner when searching addresses" time="0.014">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Address Suggestions should display address suggestions when provided by hook" name="OperatorApplicationForm Component Address Suggestions should display address suggestions when provided by hook" time="0.003">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Address Suggestions should call handleAddressSelect when suggestion is clicked" name="OperatorApplicationForm Component Address Suggestions should call handleAddressSelect when suggestion is clicked" time="0.025">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Address Suggestions should handle keyboard navigation for suggestions" name="OperatorApplicationForm Component Address Suggestions should handle keyboard navigation for suggestions" time="0.004">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Form Input Values should display input value from hook" name="OperatorApplicationForm Component Form Input Values should display input value from hook" time="0.002">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Form Validation should display validation errors from hook" name="OperatorApplicationForm Component Form Validation should display validation errors from hook" time="0.002">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Component Props should accept and use custom props" name="OperatorApplicationForm Component Component Props should accept and use custom props" time="0.004">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Component Props should pass user prop to hook" name="OperatorApplicationForm Component Component Props should pass user prop to hook" time="0.002">
    </testcase>
    <testcase classname="OperatorApplicationForm Component Component Props should work with different user objects" name="OperatorApplicationForm Component Component Props should work with different user objects" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Architecture Validation Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.11" tests="17">
    <testcase classname="Architecture Validation Tests Layer Separation Validation should maintain clear separation between service and repository layers" name="Architecture Validation Tests Layer Separation Validation should maintain clear separation between service and repository layers" time="0.004">
    </testcase>
    <testcase classname="Architecture Validation Tests Layer Separation Validation should prevent UI components from importing service layer directly" name="Architecture Validation Tests Layer Separation Validation should prevent UI components from importing service layer directly" time="0.025">
    </testcase>
    <testcase classname="Architecture Validation Tests Layer Separation Validation should ensure API routes use service layer properly" name="Architecture Validation Tests Layer Separation Validation should ensure API routes use service layer properly" time="0.007">
    </testcase>
    <testcase classname="Architecture Validation Tests Layer Separation Validation should validate repository layer independence" name="Architecture Validation Tests Layer Separation Validation should validate repository layer independence" time="0.001">
    </testcase>
    <testcase classname="Architecture Validation Tests Circular Dependency Detection should detect circular dependencies in service layer" name="Architecture Validation Tests Circular Dependency Detection should detect circular dependencies in service layer" time="0">
    </testcase>
    <testcase classname="Architecture Validation Tests Circular Dependency Detection should detect circular dependencies in repository layer" name="Architecture Validation Tests Circular Dependency Detection should detect circular dependencies in repository layer" time="0.001">
    </testcase>
    <testcase classname="Architecture Validation Tests Circular Dependency Detection should validate cross-layer dependency direction" name="Architecture Validation Tests Circular Dependency Detection should validate cross-layer dependency direction" time="0.001">
    </testcase>
    <testcase classname="Architecture Validation Tests Framework Coupling Prevention should prevent Next.js coupling in service layer" name="Architecture Validation Tests Framework Coupling Prevention should prevent Next.js coupling in service layer" time="0.004">
    </testcase>
    <testcase classname="Architecture Validation Tests Framework Coupling Prevention should prevent React coupling in service layer" name="Architecture Validation Tests Framework Coupling Prevention should prevent React coupling in service layer" time="0.005">
    </testcase>
    <testcase classname="Architecture Validation Tests Framework Coupling Prevention should prevent browser API usage in service layer" name="Architecture Validation Tests Framework Coupling Prevention should prevent browser API usage in service layer" time="0.004">
    </testcase>
    <testcase classname="Architecture Validation Tests Framework Coupling Prevention should prevent DOM manipulation in service layer" name="Architecture Validation Tests Framework Coupling Prevention should prevent DOM manipulation in service layer" time="0.005">
    </testcase>
    <testcase classname="Architecture Validation Tests Mobile-Ready Architecture Validation should validate service layer exports for mobile SDK" name="Architecture Validation Tests Mobile-Ready Architecture Validation should validate service layer exports for mobile SDK" time="0.002">
    </testcase>
    <testcase classname="Architecture Validation Tests Mobile-Ready Architecture Validation should validate repository layer exports for mobile SDK" name="Architecture Validation Tests Mobile-Ready Architecture Validation should validate repository layer exports for mobile SDK" time="0.002">
    </testcase>
    <testcase classname="Architecture Validation Tests Mobile-Ready Architecture Validation should ensure consistent error handling patterns" name="Architecture Validation Tests Mobile-Ready Architecture Validation should ensure consistent error handling patterns" time="0.001">
    </testcase>
    <testcase classname="Architecture Validation Tests Mobile-Ready Architecture Validation should validate type safety for mobile development" name="Architecture Validation Tests Mobile-Ready Architecture Validation should validate type safety for mobile development" time="0.001">
    </testcase>
    <testcase classname="Architecture Validation Tests Performance Architecture Validation should validate efficient import patterns" name="Architecture Validation Tests Performance Architecture Validation should validate efficient import patterns" time="0.001">
    </testcase>
    <testcase classname="Architecture Validation Tests Performance Architecture Validation should validate memory-efficient patterns" name="Architecture Validation Tests Performance Architecture Validation should validate memory-efficient patterns" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ServiceRequestForm Component" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:50" time="1.786" tests="14">
    <testcase classname="ServiceRequestForm Component Component Rendering should render all form sections" name="ServiceRequestForm Component Component Rendering should render all form sections" time="0.133">
    </testcase>
    <testcase classname="ServiceRequestForm Component Component Rendering should render all form fields" name="ServiceRequestForm Component Component Rendering should render all form fields" time="0.143">
    </testcase>
    <testcase classname="ServiceRequestForm Component Component Rendering should render submit button" name="ServiceRequestForm Component Component Rendering should render submit button" time="0.065">
    </testcase>
    <testcase classname="ServiceRequestForm Component User Interactions should call hook&apos;s handleJobSiteInputChange when job site input changes" name="ServiceRequestForm Component User Interactions should call hook&apos;s handleJobSiteInputChange when job site input changes" time="0.114">
    </testcase>
    <testcase classname="ServiceRequestForm Component User Interactions should call form submission handler when form is submitted" name="ServiceRequestForm Component User Interactions should call form submission handler when form is submitted" time="0.064">
    </testcase>
    <testcase classname="ServiceRequestForm Component User Interactions should display loading state when saving" name="ServiceRequestForm Component User Interactions should display loading state when saving" time="0.046">
    </testcase>
    <testcase classname="ServiceRequestForm Component User Interactions should display loading spinner when saving" name="ServiceRequestForm Component User Interactions should display loading spinner when saving" time="0.106">
    </testcase>
    <testcase classname="ServiceRequestForm Component Address Suggestions should display address suggestions when provided by hook" name="ServiceRequestForm Component Address Suggestions should display address suggestions when provided by hook" time="0.192">
    </testcase>
    <testcase classname="ServiceRequestForm Component Address Suggestions should call handleAddressSelect when suggestion is clicked" name="ServiceRequestForm Component Address Suggestions should call handleAddressSelect when suggestion is clicked" time="0.121">
    </testcase>
    <testcase classname="ServiceRequestForm Component Address Suggestions should show loading spinner when addresses are loading" name="ServiceRequestForm Component Address Suggestions should show loading spinner when addresses are loading" time="0.077">
    </testcase>
    <testcase classname="ServiceRequestForm Component Address Suggestions should handle keyboard navigation for suggestions" name="ServiceRequestForm Component Address Suggestions should handle keyboard navigation for suggestions" time="0.08">
    </testcase>
    <testcase classname="ServiceRequestForm Component Form Validation should display validation errors from hook" name="ServiceRequestForm Component Form Validation should display validation errors from hook" time="0.078">
    </testcase>
    <testcase classname="ServiceRequestForm Component Component Props should accept custom className" name="ServiceRequestForm Component Component Props should accept custom className" time="0.058">
    </testcase>
    <testcase classname="ServiceRequestForm Component Component Props should pass user prop to hook" name="ServiceRequestForm Component Component Props should pass user prop to hook" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="/api/users/[userId]" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.173" tests="15">
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Authentication &amp; Authorization should return 403 when no session exists" name="/api/users/[userId] PATCH /api/users/[userId] Authentication &amp; Authorization should return 403 when no session exists" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Authentication &amp; Authorization should return 403 when user tries to update different user" name="/api/users/[userId] PATCH /api/users/[userId] Authentication &amp; Authorization should return 403 when user tries to update different user" time="0.046">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Authentication &amp; Authorization should allow user to update their own profile" name="/api/users/[userId] PATCH /api/users/[userId] Authentication &amp; Authorization should allow user to update their own profile" time="0.004">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Data Validation should validate name length (minimum 3 characters)" name="/api/users/[userId] PATCH /api/users/[userId] Data Validation should validate name length (minimum 3 characters)" time="0.007">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Data Validation should validate name length (maximum 32 characters)" name="/api/users/[userId] PATCH /api/users/[userId] Data Validation should validate name length (maximum 32 characters)" time="0.01">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Data Validation should accept valid name" name="/api/users/[userId] PATCH /api/users/[userId] Data Validation should accept valid name" time="0.003">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Data Validation should require name field" name="/api/users/[userId] PATCH /api/users/[userId] Data Validation should require name field" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Route Context Validation should validate userId parameter" name="/api/users/[userId] PATCH /api/users/[userId] Route Context Validation should validate userId parameter" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Route Context Validation should handle empty userId parameter" name="/api/users/[userId] PATCH /api/users/[userId] Route Context Validation should handle empty userId parameter" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Error Handling should handle database errors gracefully" name="/api/users/[userId] PATCH /api/users/[userId] Error Handling should handle database errors gracefully" time="0.016">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Error Handling should handle malformed JSON gracefully" name="/api/users/[userId] PATCH /api/users/[userId] Error Handling should handle malformed JSON gracefully" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Error Handling should handle session retrieval errors" name="/api/users/[userId] PATCH /api/users/[userId] Error Handling should handle session retrieval errors" time="0.004">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Edge Cases should handle special characters in name" name="/api/users/[userId] PATCH /api/users/[userId] Edge Cases should handle special characters in name" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Edge Cases should handle unicode characters in name" name="/api/users/[userId] PATCH /api/users/[userId] Edge Cases should handle unicode characters in name" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId] PATCH /api/users/[userId] Edge Cases should trim whitespace from name" name="/api/users/[userId] PATCH /api/users/[userId] Edge Cases should trim whitespace from name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DashboardService Integration Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.132" tests="15">
    <testcase classname="DashboardService Integration Tests Repository Integration should initialize repositories with correct configuration" name="DashboardService Integration Tests Repository Integration should initialize repositories with correct configuration" time="0.004">
    </testcase>
    <testcase classname="DashboardService Integration Tests Repository Integration should set offline mode without errors" name="DashboardService Integration Tests Repository Integration should set offline mode without errors" time="0.005">
    </testcase>
    <testcase classname="DashboardService Integration Tests Repository Integration should handle repository offline mode queries" name="DashboardService Integration Tests Repository Integration should handle repository offline mode queries" time="0.001">
    </testcase>
    <testcase classname="DashboardService Integration Tests Service Layer Error Handling should handle repository errors gracefully" name="DashboardService Integration Tests Service Layer Error Handling should handle repository errors gracefully" time="0.008">
    </testcase>
    <testcase classname="DashboardService Integration Tests Service Layer Error Handling should propagate repository validation errors" name="DashboardService Integration Tests Service Layer Error Handling should propagate repository validation errors" time="0.005">
    </testcase>
    <testcase classname="DashboardService Integration Tests Cross-Service Integration should integrate with permission system for role-based access" name="DashboardService Integration Tests Cross-Service Integration should integrate with permission system for role-based access" time="0.004">
    </testcase>
    <testcase classname="DashboardService Integration Tests Cross-Service Integration should handle different role permissions correctly" name="DashboardService Integration Tests Cross-Service Integration should handle different role permissions correctly" time="0.004">
    </testcase>
    <testcase classname="DashboardService Integration Tests Mobile Platform Integration should support mobile caching patterns" name="DashboardService Integration Tests Mobile Platform Integration should support mobile caching patterns" time="0.002">
    </testcase>
    <testcase classname="DashboardService Integration Tests Mobile Platform Integration should handle offline mode gracefully" name="DashboardService Integration Tests Mobile Platform Integration should handle offline mode gracefully" time="0.002">
    </testcase>
    <testcase classname="DashboardService Integration Tests Performance and Scalability should handle large datasets efficiently" name="DashboardService Integration Tests Performance and Scalability should handle large datasets efficiently" time="0.001">
    </testcase>
    <testcase classname="DashboardService Integration Tests Performance and Scalability should respect pagination limits" name="DashboardService Integration Tests Performance and Scalability should respect pagination limits" time="0.001">
    </testcase>
    <testcase classname="DashboardService Integration Tests Data Consistency should maintain data consistency across role-specific queries" name="DashboardService Integration Tests Data Consistency should maintain data consistency across role-specific queries" time="0.001">
    </testcase>
    <testcase classname="DashboardService Integration Tests Data Consistency should handle concurrent requests safely" name="DashboardService Integration Tests Data Consistency should handle concurrent requests safely" time="0.01">
    </testcase>
    <testcase classname="DashboardService Integration Tests Error Recovery should recover from transient database errors" name="DashboardService Integration Tests Error Recovery should recover from transient database errors" time="0.002">
    </testcase>
    <testcase classname="DashboardService Integration Tests Error Recovery should provide meaningful error messages" name="DashboardService Integration Tests Error Recovery should provide meaningful error messages" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Decimal Utilities" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.109" tests="36">
    <testcase classname="Decimal Utilities decimalToNumber should convert Decimal to number with 2 decimal places" name="Decimal Utilities decimalToNumber should convert Decimal to number with 2 decimal places" time="0.001">
    </testcase>
    <testcase classname="Decimal Utilities decimalToNumber should handle null input" name="Decimal Utilities decimalToNumber should handle null input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToNumber should handle undefined input" name="Decimal Utilities decimalToNumber should handle undefined input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToNumber should handle zero" name="Decimal Utilities decimalToNumber should handle zero" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToNumber should handle negative numbers" name="Decimal Utilities decimalToNumber should handle negative numbers" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToNumber should maintain financial precision" name="Decimal Utilities decimalToNumber should maintain financial precision" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToHours should convert Decimal to number with 4 decimal places" name="Decimal Utilities decimalToHours should convert Decimal to number with 4 decimal places" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToHours should return 0 for null input" name="Decimal Utilities decimalToHours should return 0 for null input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToHours should return 0 for undefined input" name="Decimal Utilities decimalToHours should return 0 for undefined input" time="0.001">
    </testcase>
    <testcase classname="Decimal Utilities decimalToHours should handle fractional hours" name="Decimal Utilities decimalToHours should handle fractional hours" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToHours should handle very precise durations" name="Decimal Utilities decimalToHours should handle very precise durations" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToRate should convert Decimal to number with 4 decimal places" name="Decimal Utilities decimalToRate should convert Decimal to number with 4 decimal places" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToRate should handle null input" name="Decimal Utilities decimalToRate should handle null input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToRate should handle undefined input" name="Decimal Utilities decimalToRate should handle undefined input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToRate should handle high precision rates" name="Decimal Utilities decimalToRate should handle high precision rates" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToString should convert Decimal to string with default 2 decimal places" name="Decimal Utilities decimalToString should convert Decimal to string with default 2 decimal places" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToString should convert Decimal to string with custom decimal places" name="Decimal Utilities decimalToString should convert Decimal to string with custom decimal places" time="0.001">
    </testcase>
    <testcase classname="Decimal Utilities decimalToString should handle null input" name="Decimal Utilities decimalToString should handle null input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToString should handle undefined input" name="Decimal Utilities decimalToString should handle undefined input" time="0">
    </testcase>
    <testcase classname="Decimal Utilities decimalToString should handle zero decimal places" name="Decimal Utilities decimalToString should handle zero decimal places" time="0">
    </testcase>
    <testcase classname="Decimal Utilities numberToDecimal should convert number to Decimal" name="Decimal Utilities numberToDecimal should convert number to Decimal" time="0">
    </testcase>
    <testcase classname="Decimal Utilities numberToDecimal should convert string to Decimal" name="Decimal Utilities numberToDecimal should convert string to Decimal" time="0">
    </testcase>
    <testcase classname="Decimal Utilities numberToDecimal should handle negative numbers" name="Decimal Utilities numberToDecimal should handle negative numbers" time="0">
    </testcase>
    <testcase classname="Decimal Utilities numberToDecimal should handle zero" name="Decimal Utilities numberToDecimal should handle zero" time="0">
    </testcase>
    <testcase classname="Decimal Utilities isDecimal should return true for Decimal instances" name="Decimal Utilities isDecimal should return true for Decimal instances" time="0">
    </testcase>
    <testcase classname="Decimal Utilities isDecimal should return false for numbers" name="Decimal Utilities isDecimal should return false for numbers" time="0">
    </testcase>
    <testcase classname="Decimal Utilities isDecimal should return false for strings" name="Decimal Utilities isDecimal should return false for strings" time="0.001">
    </testcase>
    <testcase classname="Decimal Utilities isDecimal should return false for null" name="Decimal Utilities isDecimal should return false for null" time="0">
    </testcase>
    <testcase classname="Decimal Utilities isDecimal should return false for undefined" name="Decimal Utilities isDecimal should return false for undefined" time="0">
    </testcase>
    <testcase classname="Decimal Utilities isDecimal should return false for objects" name="Decimal Utilities isDecimal should return false for objects" time="0">
    </testcase>
    <testcase classname="Decimal Utilities Precision Loss Prevention should prevent precision loss in financial calculations" name="Decimal Utilities Precision Loss Prevention should prevent precision loss in financial calculations" time="0">
    </testcase>
    <testcase classname="Decimal Utilities Precision Loss Prevention should maintain accuracy for duration calculations" name="Decimal Utilities Precision Loss Prevention should maintain accuracy for duration calculations" time="0">
    </testcase>
    <testcase classname="Decimal Utilities Precision Loss Prevention should handle edge cases without precision loss" name="Decimal Utilities Precision Loss Prevention should handle edge cases without precision loss" time="0">
    </testcase>
    <testcase classname="Decimal Utilities Integration with Dashboard Service Types should work with estimatedCost conversion" name="Decimal Utilities Integration with Dashboard Service Types should work with estimatedCost conversion" time="0.005">
    </testcase>
    <testcase classname="Decimal Utilities Integration with Dashboard Service Types should work with requestedTotalHours conversion" name="Decimal Utilities Integration with Dashboard Service Types should work with requestedTotalHours conversion" time="0">
    </testcase>
    <testcase classname="Decimal Utilities Integration with Dashboard Service Types should work with rate conversions" name="Decimal Utilities Integration with Dashboard Service Types should work with rate conversions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Platform-Agnostic Validation Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:51" time="1.002" tests="18">
    <testcase classname="Platform-Agnostic Validation Tests Framework Independence should instantiate all services without Next.js dependencies" name="Platform-Agnostic Validation Tests Framework Independence should instantiate all services without Next.js dependencies" time="0.001">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Framework Independence should work without browser globals" name="Platform-Agnostic Validation Tests Framework Independence should work without browser globals" time="0.007">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Framework Independence should not import Next.js specific modules" name="Platform-Agnostic Validation Tests Framework Independence should not import Next.js specific modules" time="0.008">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Framework Independence should not import React dependencies" name="Platform-Agnostic Validation Tests Framework Independence should not import React dependencies" time="0.003">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests React Native Environment Simulation should work in React Native-like environment" name="Platform-Agnostic Validation Tests React Native Environment Simulation should work in React Native-like environment" time="0.002">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests React Native Environment Simulation should handle mobile-specific data serialization" name="Platform-Agnostic Validation Tests React Native Environment Simulation should handle mobile-specific data serialization" time="0.005">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests React Native Environment Simulation should provide consistent error handling for mobile apps" name="Platform-Agnostic Validation Tests React Native Environment Simulation should provide consistent error handling for mobile apps" time="0.002">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Cross-Platform API Consistency should provide consistent ServiceResult format across all operations" name="Platform-Agnostic Validation Tests Cross-Platform API Consistency should provide consistent ServiceResult format across all operations" time="0.003">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Cross-Platform API Consistency should handle async operations consistently" name="Platform-Agnostic Validation Tests Cross-Platform API Consistency should handle async operations consistently" time="0.004">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Cross-Platform API Consistency should provide mobile-friendly type definitions" name="Platform-Agnostic Validation Tests Cross-Platform API Consistency should provide mobile-friendly type definitions" time="0">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Mobile SDK Integration Patterns should support dependency injection for mobile testing" name="Platform-Agnostic Validation Tests Mobile SDK Integration Patterns should support dependency injection for mobile testing" time="0">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Mobile SDK Integration Patterns should handle network failures gracefully for mobile apps" name="Platform-Agnostic Validation Tests Mobile SDK Integration Patterns should handle network failures gracefully for mobile apps" time="0.01">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Mobile SDK Integration Patterns should provide offline-capable business logic" name="Platform-Agnostic Validation Tests Mobile SDK Integration Patterns should provide offline-capable business logic" time="0.006">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Performance for Mobile Devices should perform calculations efficiently on mobile hardware" name="Platform-Agnostic Validation Tests Performance for Mobile Devices should perform calculations efficiently on mobile hardware" time="0.85">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Performance for Mobile Devices should minimize memory usage for mobile apps" name="Platform-Agnostic Validation Tests Performance for Mobile Devices should minimize memory usage for mobile apps" time="0.007">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Mobile Authentication Patterns should support token-based authentication for mobile apps" name="Platform-Agnostic Validation Tests Mobile Authentication Patterns should support token-based authentication for mobile apps" time="0.001">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Mobile Authentication Patterns should handle session data for hybrid authentication" name="Platform-Agnostic Validation Tests Mobile Authentication Patterns should handle session data for hybrid authentication" time="0">
    </testcase>
    <testcase classname="Platform-Agnostic Validation Tests Mobile Authentication Patterns should provide consistent error codes for mobile error handling" name="Platform-Agnostic Validation Tests Mobile Authentication Patterns should provide consistent error codes for mobile error handling" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="/api/service-requests/[requestId]" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.202" tests="16">
    <testcase classname="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when user has no access to request" name="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when user has no access to request" time="0.031">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when no session exists" name="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when no session exists" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Authentication &amp; Authorization should allow access when user owns the request" name="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Authentication &amp; Authorization should allow access when user owns the request" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Data Retrieval should return service request with relations" name="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Data Retrieval should return service request with relations" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Data Retrieval should return 404 when request does not exist" name="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Data Retrieval should return 404 when request does not exist" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Error Handling should handle database errors gracefully" name="/api/service-requests/[requestId] GET /api/service-requests/[requestId] Error Handling should handle database errors gracefully" time="0.002">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when user has no access to request" name="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when user has no access to request" time="0.021">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Authentication &amp; Authorization should allow updates when user owns the request" name="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Authentication &amp; Authorization should allow updates when user owns the request" time="0.006">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Data Validation should validate update data with Zod schema" name="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Data Validation should validate update data with Zod schema" time="0.005">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Data Validation should handle date parsing correctly" name="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Data Validation should handle date parsing correctly" time="0.005">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Error Handling should handle database errors gracefully" name="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Error Handling should handle database errors gracefully" time="0.005">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Error Handling should handle malformed JSON gracefully" name="/api/service-requests/[requestId] PATCH /api/service-requests/[requestId] Error Handling should handle malformed JSON gracefully" time="0">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when user has no access to request" name="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Authentication &amp; Authorization should return 403 when user has no access to request" time="0.005">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Authentication &amp; Authorization should allow deletion when user owns the request" name="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Authentication &amp; Authorization should allow deletion when user owns the request" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Error Handling should handle database errors gracefully" name="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Error Handling should handle database errors gracefully" time="0.003">
    </testcase>
    <testcase classname="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Error Handling should handle invalid context parameters" name="/api/service-requests/[requestId] DELETE /api/service-requests/[requestId] Error Handling should handle invalid context parameters" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="ServiceRequestRepository" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.296" tests="19">
    <testcase classname="ServiceRequestRepository findById should find service request by ID successfully" name="ServiceRequestRepository findById should find service request by ID successfully" time="0.101">
    </testcase>
    <testcase classname="ServiceRequestRepository findById should handle validation error for missing ID" name="ServiceRequestRepository findById should handle validation error for missing ID" time="0.004">
    </testcase>
    <testcase classname="ServiceRequestRepository findById should handle database errors" name="ServiceRequestRepository findById should handle database errors" time="0.009">
    </testcase>
    <testcase classname="ServiceRequestRepository findManyWithRoleAccess should find requests for ADMIN role" name="ServiceRequestRepository findManyWithRoleAccess should find requests for ADMIN role" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository findManyWithRoleAccess should find requests for MANAGER role" name="ServiceRequestRepository findManyWithRoleAccess should find requests for MANAGER role" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository findManyWithRoleAccess should find requests for OPERATOR role" name="ServiceRequestRepository findManyWithRoleAccess should find requests for OPERATOR role" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository findManyWithRoleAccess should find requests for USER role" name="ServiceRequestRepository findManyWithRoleAccess should find requests for USER role" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository findManyWithRoleAccess should apply additional filters" name="ServiceRequestRepository findManyWithRoleAccess should apply additional filters" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository create should create service request successfully" name="ServiceRequestRepository create should create service request successfully" time="0.003">
    </testcase>
    <testcase classname="ServiceRequestRepository create should handle validation errors" name="ServiceRequestRepository create should handle validation errors" time="0.006">
    </testcase>
    <testcase classname="ServiceRequestRepository update should update service request successfully" name="ServiceRequestRepository update should update service request successfully" time="0.003">
    </testcase>
    <testcase classname="ServiceRequestRepository update should handle validation error for missing ID" name="ServiceRequestRepository update should handle validation error for missing ID" time="0.02">
    </testcase>
    <testcase classname="ServiceRequestRepository delete should delete service request successfully" name="ServiceRequestRepository delete should delete service request successfully" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository delete should handle validation error for missing ID" name="ServiceRequestRepository delete should handle validation error for missing ID" time="0.002">
    </testcase>
    <testcase classname="ServiceRequestRepository count should count service requests successfully" name="ServiceRequestRepository count should count service requests successfully" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestRepository count should count with filters" name="ServiceRequestRepository count should count with filters" time="0">
    </testcase>
    <testcase classname="ServiceRequestRepository updateStatus should update status with history tracking" name="ServiceRequestRepository updateStatus should update status with history tracking" time="0.003">
    </testcase>
    <testcase classname="ServiceRequestRepository updateStatus should handle service request not found" name="ServiceRequestRepository updateStatus should handle service request not found" time="0.007">
    </testcase>
    <testcase classname="ServiceRequestRepository updateStatus should handle validation errors" name="ServiceRequestRepository updateStatus should handle validation errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="/api/service-requests" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.153" tests="20">
    <testcase classname="/api/service-requests GET /api/service-requests Authentication should return 401 when no session exists" name="/api/service-requests GET /api/service-requests Authentication should return 401 when no session exists" time="0.007">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Authentication should authenticate with JWT Bearer token" name="/api/service-requests GET /api/service-requests Authentication should authenticate with JWT Bearer token" time="0.013">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Authentication should fallback to session auth when JWT fails" name="/api/service-requests GET /api/service-requests Authentication should fallback to session auth when JWT fails" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Role-based Access Control should return own requests for USER role" name="/api/service-requests GET /api/service-requests Role-based Access Control should return own requests for USER role" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Role-based Access Control should return own + assigned requests for OPERATOR role" name="/api/service-requests GET /api/service-requests Role-based Access Control should return own + assigned requests for OPERATOR role" time="0.014">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Role-based Access Control should return all requests for MANAGER role" name="/api/service-requests GET /api/service-requests Role-based Access Control should return all requests for MANAGER role" time="0.003">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Role-based Access Control should return all requests for ADMIN role" name="/api/service-requests GET /api/service-requests Role-based Access Control should return all requests for ADMIN role" time="0.003">
    </testcase>
    <testcase classname="/api/service-requests GET /api/service-requests Error Handling should handle database errors gracefully" name="/api/service-requests GET /api/service-requests Error Handling should handle database errors gracefully" time="0.009">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Authentication should return 401 when no session exists" name="/api/service-requests POST /api/service-requests Authentication should return 401 when no session exists" time="0">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Authorization should allow USER role to submit requests" name="/api/service-requests POST /api/service-requests Authorization should allow USER role to submit requests" time="0.002">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Authorization should allow OPERATOR role to submit requests" name="/api/service-requests POST /api/service-requests Authorization should allow OPERATOR role to submit requests" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Authorization should allow MANAGER role to submit requests" name="/api/service-requests POST /api/service-requests Authorization should allow MANAGER role to submit requests" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Authorization should allow ADMIN role to submit requests" name="/api/service-requests POST /api/service-requests Authorization should allow ADMIN role to submit requests" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Data Validation should validate required fields" name="/api/service-requests POST /api/service-requests Data Validation should validate required fields" time="0.007">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Data Validation should validate email format" name="/api/service-requests POST /api/service-requests Data Validation should validate email format" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Data Validation should validate date format" name="/api/service-requests POST /api/service-requests Data Validation should validate date format" time="0.001">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Business Logic should calculate total hours correctly" name="/api/service-requests POST /api/service-requests Business Logic should calculate total hours correctly" time="0">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Business Logic should set correct status and user ID" name="/api/service-requests POST /api/service-requests Business Logic should set correct status and user ID" time="0">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Error Handling should handle database errors gracefully" name="/api/service-requests POST /api/service-requests Error Handling should handle database errors gracefully" time="0.003">
    </testcase>
    <testcase classname="/api/service-requests POST /api/service-requests Error Handling should handle malformed JSON gracefully" name="/api/service-requests POST /api/service-requests Error Handling should handle malformed JSON gracefully" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Mobile Authentication Middleware" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.09" tests="18">
    <testcase classname="Mobile Authentication Middleware authenticateRequest should authenticate with valid JWT Bearer token" name="Mobile Authentication Middleware authenticateRequest should authenticate with valid JWT Bearer token" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware authenticateRequest should fallback to session authentication when no Bearer token" name="Mobile Authentication Middleware authenticateRequest should fallback to session authentication when no Bearer token" time="0">
    </testcase>
    <testcase classname="Mobile Authentication Middleware authenticateRequest should return unauthenticated when no valid auth found" name="Mobile Authentication Middleware authenticateRequest should return unauthenticated when no valid auth found" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware authenticateRequest should handle invalid JWT token gracefully" name="Mobile Authentication Middleware authenticateRequest should handle invalid JWT token gracefully" time="0">
    </testcase>
    <testcase classname="Mobile Authentication Middleware authenticateRequest should handle database errors during JWT auth" name="Mobile Authentication Middleware authenticateRequest should handle database errors during JWT auth" time="0.01">
    </testcase>
    <testcase classname="Mobile Authentication Middleware authenticateRequest should handle user not found in database" name="Mobile Authentication Middleware authenticateRequest should handle user not found in database" time="0">
    </testcase>
    <testcase classname="Mobile Authentication Middleware requireAuth should return user when authenticated" name="Mobile Authentication Middleware requireAuth should return user when authenticated" time="0.002">
    </testcase>
    <testcase classname="Mobile Authentication Middleware requireAuth should throw 401 response when not authenticated" name="Mobile Authentication Middleware requireAuth should throw 401 response when not authenticated" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware hasRole should return true for exact role match" name="Mobile Authentication Middleware hasRole should return true for exact role match" time="0">
    </testcase>
    <testcase classname="Mobile Authentication Middleware hasRole should return true for admin role regardless of required role" name="Mobile Authentication Middleware hasRole should return true for admin role regardless of required role" time="0">
    </testcase>
    <testcase classname="Mobile Authentication Middleware hasRole should return false for role mismatch" name="Mobile Authentication Middleware hasRole should return false for role mismatch" time="0.011">
    </testcase>
    <testcase classname="Mobile Authentication Middleware hasRole should return false when user has no role" name="Mobile Authentication Middleware hasRole should return false when user has no role" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware hasRole should return false when user is undefined" name="Mobile Authentication Middleware hasRole should return false when user is undefined" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware requireRole should return user when role matches" name="Mobile Authentication Middleware requireRole should return user when role matches" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware requireRole should throw 403 response when role insufficient" name="Mobile Authentication Middleware requireRole should throw 403 response when role insufficient" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware requireRole should allow admin role for any required role" name="Mobile Authentication Middleware requireRole should allow admin role for any required role" time="0.001">
    </testcase>
    <testcase classname="Mobile Authentication Middleware Backward compatibility should maintain compatibility with existing session-based routes" name="Mobile Authentication Middleware Backward compatibility should maintain compatibility with existing session-based routes" time="0.004">
    </testcase>
    <testcase classname="Mobile Authentication Middleware Backward compatibility should prioritize JWT auth over session auth when both present" name="Mobile Authentication Middleware Backward compatibility should prioritize JWT auth over session auth when both present" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GeocodingService" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.102" tests="24">
    <testcase classname="GeocodingService Service Initialization should initialize with default providers" name="GeocodingService Service Initialization should initialize with default providers" time="0.001">
    </testcase>
    <testcase classname="GeocodingService Service Initialization should allow adding custom providers" name="GeocodingService Service Initialization should allow adding custom providers" time="0">
    </testcase>
    <testcase classname="GeocodingService Address Search should return empty array for queries less than 3 characters" name="GeocodingService Address Search should return empty array for queries less than 3 characters" time="0.001">
    </testcase>
    <testcase classname="GeocodingService Address Search should validate required parameters" name="GeocodingService Address Search should validate required parameters" time="0">
    </testcase>
    <testcase classname="GeocodingService Address Search should successfully search addresses with Nominatim provider" name="GeocodingService Address Search should successfully search addresses with Nominatim provider" time="0.003">
    </testcase>
    <testcase classname="GeocodingService Address Search should cache successful search results" name="GeocodingService Address Search should cache successful search results" time="0.003">
    </testcase>
    <testcase classname="GeocodingService Address Search should handle provider failures gracefully" name="GeocodingService Address Search should handle provider failures gracefully" time="0.001">
    </testcase>
    <testcase classname="GeocodingService Address Search should respect rate limiting" name="GeocodingService Address Search should respect rate limiting" time="0.022">
    </testcase>
    <testcase classname="GeocodingService Reverse Geocoding should validate required coordinates" name="GeocodingService Reverse Geocoding should validate required coordinates" time="0.005">
    </testcase>
    <testcase classname="GeocodingService Reverse Geocoding should successfully reverse geocode coordinates" name="GeocodingService Reverse Geocoding should successfully reverse geocode coordinates" time="0.001">
    </testcase>
    <testcase classname="GeocodingService Reverse Geocoding should cache reverse geocoding results" name="GeocodingService Reverse Geocoding should cache reverse geocoding results" time="0">
    </testcase>
    <testcase classname="GeocodingService Reverse Geocoding should handle no results gracefully" name="GeocodingService Reverse Geocoding should handle no results gracefully" time="0.001">
    </testcase>
    <testcase classname="GeocodingService Cache Management should provide cache statistics" name="GeocodingService Cache Management should provide cache statistics" time="0">
    </testcase>
    <testcase classname="GeocodingService Cache Management should clear cache when requested" name="GeocodingService Cache Management should clear cache when requested" time="0.001">
    </testcase>
    <testcase classname="GeocodingService Cache Management should expire cache entries after TTL" name="GeocodingService Cache Management should expire cache entries after TTL" time="0">
    </testcase>
    <testcase classname="NominatimProvider Provider Availability should check availability correctly" name="NominatimProvider Provider Availability should check availability correctly" time="0">
    </testcase>
    <testcase classname="NominatimProvider Provider Availability should handle availability check failures" name="NominatimProvider Provider Availability should handle availability check failures" time="0">
    </testcase>
    <testcase classname="NominatimProvider Address Search should return empty array for short queries" name="NominatimProvider Address Search should return empty array for short queries" time="0">
    </testcase>
    <testcase classname="NominatimProvider Address Search should format search requests correctly" name="NominatimProvider Address Search should format search requests correctly" time="0">
    </testcase>
    <testcase classname="NominatimProvider Address Search should handle API errors" name="NominatimProvider Address Search should handle API errors" time="0.009">
    </testcase>
    <testcase classname="NominatimProvider Reverse Geocoding should format reverse geocoding requests correctly" name="NominatimProvider Reverse Geocoding should format reverse geocoding requests correctly" time="0.001">
    </testcase>
    <testcase classname="NominatimProvider Reverse Geocoding should handle reverse geocoding API errors" name="NominatimProvider Reverse Geocoding should handle reverse geocoding API errors" time="0">
    </testcase>
    <testcase classname="MobileLocationProvider should not be available yet" name="MobileLocationProvider should not be available yet" time="0">
    </testcase>
    <testcase classname="MobileLocationProvider should throw not implemented errors" name="MobileLocationProvider should throw not implemented errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ServiceRequestService" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.093" tests="58">
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for HALF_DAY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for HALF_DAY correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for FULL_DAY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for FULL_DAY correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for MULTI_DAY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for MULTI_DAY correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should calculate hours for WEEKLY correctly" name="ServiceRequestService calculateTotalHours should calculate hours for WEEKLY correctly" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should handle single unit durations" name="ServiceRequestService calculateTotalHours should handle single unit durations" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should reject invalid duration values" name="ServiceRequestService calculateTotalHours should reject invalid duration values" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should reject negative duration values" name="ServiceRequestService calculateTotalHours should reject negative duration values" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should reject invalid duration types" name="ServiceRequestService calculateTotalHours should reject invalid duration types" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should validate required parameters" name="ServiceRequestService calculateTotalHours should validate required parameters" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTotalHours should log operations" name="ServiceRequestService calculateTotalHours should log operations" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for single HALF_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for single HALF_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for multiple HALF_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for multiple HALF_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for single FULL_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for single FULL_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for multiple FULL_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for multiple FULL_DAY" time="0.016">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for MULTI_DAY" name="ServiceRequestService getDurationDisplayText should generate display text for MULTI_DAY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for single WEEKLY" name="ServiceRequestService getDurationDisplayText should generate display text for single WEEKLY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should generate display text for multiple WEEKLY" name="ServiceRequestService getDurationDisplayText should generate display text for multiple WEEKLY" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should reject invalid duration values" name="ServiceRequestService getDurationDisplayText should reject invalid duration values" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService getDurationDisplayText should reject invalid duration types" name="ServiceRequestService getDurationDisplayText should reject invalid duration types" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should return correct fee for WE_HANDLE_IT" name="ServiceRequestService calculateTransportFee should return correct fee for WE_HANDLE_IT" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should return correct fee for YOU_HANDLE_IT" name="ServiceRequestService calculateTransportFee should return correct fee for YOU_HANDLE_IT" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should reject invalid transport options" name="ServiceRequestService calculateTransportFee should reject invalid transport options" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateTransportFee should validate required parameters" name="ServiceRequestService calculateTransportFee should validate required parameters" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate hourly rate correctly" name="ServiceRequestService calculateBaseCost should calculate hourly rate correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate half-day rate correctly" name="ServiceRequestService calculateBaseCost should calculate half-day rate correctly" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate daily rate correctly" name="ServiceRequestService calculateBaseCost should calculate daily rate correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should calculate weekly rate correctly" name="ServiceRequestService calculateBaseCost should calculate weekly rate correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should apply equipment multipliers correctly" name="ServiceRequestService calculateBaseCost should apply equipment multipliers correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should round to 2 decimal places" name="ServiceRequestService calculateBaseCost should round to 2 decimal places" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should reject invalid inputs" name="ServiceRequestService calculateBaseCost should reject invalid inputs" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should reject invalid equipment categories" name="ServiceRequestService calculateBaseCost should reject invalid equipment categories" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateBaseCost should reject invalid rate types" name="ServiceRequestService calculateBaseCost should reject invalid rate types" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should calculate complete pricing correctly" name="ServiceRequestService calculateServiceRequestPricing should calculate complete pricing correctly" time="0">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should handle complex equipment multipliers" name="ServiceRequestService calculateServiceRequestPricing should handle complex equipment multipliers" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should handle YOU_HANDLE_IT transport" name="ServiceRequestService calculateServiceRequestPricing should handle YOU_HANDLE_IT transport" time="0.002">
    </testcase>
    <testcase classname="ServiceRequestService calculateServiceRequestPricing should propagate calculation errors" name="ServiceRequestService calculateServiceRequestPricing should propagate calculation errors" time="0.005">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should validate initial status transition" name="ServiceRequestService validateStatusTransition should validate initial status transition" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should reject invalid initial status" name="ServiceRequestService validateStatusTransition should reject invalid initial status" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should validate valid status transitions" name="ServiceRequestService validateStatusTransition should validate valid status transitions" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should reject invalid status transitions" name="ServiceRequestService validateStatusTransition should reject invalid status transitions" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should handle terminal statuses" name="ServiceRequestService validateStatusTransition should handle terminal statuses" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should handle invalid source status" name="ServiceRequestService validateStatusTransition should handle invalid source status" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateStatusTransition should validate required parameters" name="ServiceRequestService validateStatusTransition should validate required parameters" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should return valid next statuses for SUBMITTED" name="ServiceRequestService getValidNextStatuses should return valid next statuses for SUBMITTED" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should return valid next statuses for UNDER_REVIEW" name="ServiceRequestService getValidNextStatuses should return valid next statuses for UNDER_REVIEW" time="0">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should return empty array for terminal statuses" name="ServiceRequestService getValidNextStatuses should return empty array for terminal statuses" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService getValidNextStatuses should reject invalid status" name="ServiceRequestService getValidNextStatuses should reject invalid status" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should validate correct business rules" name="ServiceRequestService validateServiceRequestBusinessRules should validate correct business rules" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject past start dates" name="ServiceRequestService validateServiceRequestBusinessRules should reject past start dates" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject end date before start date" name="ServiceRequestService validateServiceRequestBusinessRules should reject end date before start date" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject excessive weekly durations" name="ServiceRequestService validateServiceRequestBusinessRules should reject excessive weekly durations" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject excessive multi-day durations" name="ServiceRequestService validateServiceRequestBusinessRules should reject excessive multi-day durations" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should reject excessive daily durations" name="ServiceRequestService validateServiceRequestBusinessRules should reject excessive daily durations" time="0.001">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should handle multiple validation errors" name="ServiceRequestService validateServiceRequestBusinessRules should handle multiple validation errors" time="0">
    </testcase>
    <testcase classname="ServiceRequestService validateServiceRequestBusinessRules should handle missing end date" name="ServiceRequestService validateServiceRequestBusinessRules should handle missing end date" time="0.003">
    </testcase>
    <testcase classname="ServiceRequestService service integration should maintain service name" name="ServiceRequestService service integration should maintain service name" time="0">
    </testcase>
    <testcase classname="ServiceRequestService service integration should log all operations" name="ServiceRequestService service integration should log all operations" time="0">
    </testcase>
    <testcase classname="ServiceRequestService service integration should handle edge cases gracefully" name="ServiceRequestService service integration should handle edge cases gracefully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="/api/auth/mobile/refresh" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.083" tests="14">
    <testcase classname="/api/auth/mobile/refresh POST should successfully refresh tokens with valid refresh token" name="/api/auth/mobile/refresh POST should successfully refresh tokens with valid refresh token" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should return 401 for invalid refresh token" name="/api/auth/mobile/refresh POST should return 401 for invalid refresh token" time="0">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should return 401 for expired refresh token" name="/api/auth/mobile/refresh POST should return 401 for expired refresh token" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should return 401 when user not found in database" name="/api/auth/mobile/refresh POST should return 401 when user not found in database" time="0">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should return 400 for missing refresh token" name="/api/auth/mobile/refresh POST should return 400 for missing refresh token" time="0.007">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should return 400 for empty refresh token" name="/api/auth/mobile/refresh POST should return 400 for empty refresh token" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should handle database errors gracefully" name="/api/auth/mobile/refresh POST should handle database errors gracefully" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should handle malformed JSON gracefully" name="/api/auth/mobile/refresh POST should handle malformed JSON gracefully" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should apply rate limiting" name="/api/auth/mobile/refresh POST should apply rate limiting" time="0">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should generate new tokens with current user data" name="/api/auth/mobile/refresh POST should generate new tokens with current user data" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should handle user with no role" name="/api/auth/mobile/refresh POST should handle user with no role" time="0.005">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should handle user with no name" name="/api/auth/mobile/refresh POST should handle user with no name" time="0.002">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh POST should verify token expiration before processing" name="/api/auth/mobile/refresh POST should verify token expiration before processing" time="0.001">
    </testcase>
    <testcase classname="/api/auth/mobile/refresh GET should return 405 Method Not Allowed" name="/api/auth/mobile/refresh GET should return 405 Method Not Allowed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="UserAuthForm Snapshots" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.181" tests="2">
    <testcase classname="UserAuthForm Snapshots matches snapshot in login mode" name="UserAuthForm Snapshots matches snapshot in login mode" time="0.019">
    </testcase>
    <testcase classname="UserAuthForm Snapshots matches snapshot in register mode" name="UserAuthForm Snapshots matches snapshot in register mode" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="session management" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.055" tests="23">
    <testcase classname="session management getCurrentUser should return user when session exists" name="session management getCurrentUser should return user when session exists" time="0.001">
    </testcase>
    <testcase classname="session management getCurrentUser should return undefined when no session exists" name="session management getCurrentUser should return undefined when no session exists" time="0">
    </testcase>
    <testcase classname="session management getCurrentUser should return undefined when session exists but no user" name="session management getCurrentUser should return undefined when session exists but no user" time="0">
    </testcase>
    <testcase classname="session management getCurrentUser should handle session with partial user data" name="session management getCurrentUser should handle session with partial user data" time="0">
    </testcase>
    <testcase classname="session management getCurrentUserWithRole should return user with role when session exists" name="session management getCurrentUserWithRole should return user with role when session exists" time="0">
    </testcase>
    <testcase classname="session management getCurrentUserWithRole should return null when no session exists" name="session management getCurrentUserWithRole should return null when no session exists" time="0">
    </testcase>
    <testcase classname="session management getCurrentUserWithRole should return null when session exists but no user" name="session management getCurrentUserWithRole should return null when session exists but no user" time="0">
    </testcase>
    <testcase classname="session management getCurrentUserWithRole should default role to USER when role is missing" name="session management getCurrentUserWithRole should default role to USER when role is missing" time="0.001">
    </testcase>
    <testcase classname="session management getCurrentUserWithRole should preserve existing role when present" name="session management getCurrentUserWithRole should preserve existing role when present" time="0">
    </testcase>
    <testcase classname="session management requireAuth should return user when authenticated" name="session management requireAuth should return user when authenticated" time="0">
    </testcase>
    <testcase classname="session management requireAuth should throw error when not authenticated" name="session management requireAuth should throw error when not authenticated" time="0.011">
    </testcase>
    <testcase classname="session management requireAuth should throw error when session exists but no user" name="session management requireAuth should throw error when session exists but no user" time="0">
    </testcase>
    <testcase classname="session management requireRole should return user when user has required role (string)" name="session management requireRole should return user when user has required role (string)" time="0">
    </testcase>
    <testcase classname="session management requireRole should return user when user has one of required roles (array)" name="session management requireRole should return user when user has one of required roles (array)" time="0">
    </testcase>
    <testcase classname="session management requireRole should throw error when user does not have required role (string)" name="session management requireRole should throw error when user does not have required role (string)" time="0.001">
    </testcase>
    <testcase classname="session management requireRole should throw error when user does not have any required roles (array)" name="session management requireRole should throw error when user does not have any required roles (array)" time="0">
    </testcase>
    <testcase classname="session management requireRole should throw error when not authenticated" name="session management requireRole should throw error when not authenticated" time="0">
    </testcase>
    <testcase classname="session management requireRole should handle user with missing role (defaults to USER)" name="session management requireRole should handle user with missing role (defaults to USER)" time="0">
    </testcase>
    <testcase classname="session management requireRole should reject user with missing role when requiring higher privileges" name="session management requireRole should reject user with missing role when requiring higher privileges" time="0">
    </testcase>
    <testcase classname="session management requireRole should handle empty array of required roles" name="session management requireRole should handle empty array of required roles" time="0">
    </testcase>
    <testcase classname="session management error handling should handle getServerSession throwing an error" name="session management error handling should handle getServerSession throwing an error" time="0.001">
    </testcase>
    <testcase classname="session management error handling should handle malformed session data" name="session management error handling should handle malformed session data" time="0">
    </testcase>
    <testcase classname="session management integration scenarios should work with realistic session data" name="session management integration scenarios should work with realistic session data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Post Validation Schemas" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.098" tests="17">
    <testcase classname="Post Validation Schemas postPatchSchema should validate complete valid post patch data" name="Post Validation Schemas postPatchSchema should validate complete valid post patch data" time="0.001">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema should validate partial updates (all fields optional)" name="Post Validation Schemas postPatchSchema should validate partial updates (all fields optional)" time="0.021">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema title validation should accept valid titles" name="Post Validation Schemas postPatchSchema title validation should accept valid titles" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema title validation should reject titles that are too short" name="Post Validation Schemas postPatchSchema title validation should reject titles that are too short" time="0.001">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema title validation should reject titles that are too long" name="Post Validation Schemas postPatchSchema title validation should reject titles that are too long" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema title validation should reject non-string title values" name="Post Validation Schemas postPatchSchema title validation should reject non-string title values" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema content validation should accept any content type (z.any())" name="Post Validation Schemas postPatchSchema content validation should accept any content type (z.any())" time="0.001">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema content validation should handle complex Editor.js content structures" name="Post Validation Schemas postPatchSchema content validation should handle complex Editor.js content structures" time="0.001">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema edge cases should handle empty object" name="Post Validation Schemas postPatchSchema edge cases should handle empty object" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema edge cases should handle undefined values correctly" name="Post Validation Schemas postPatchSchema edge cases should handle undefined values correctly" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema edge cases should handle mixed valid and invalid fields" name="Post Validation Schemas postPatchSchema edge cases should handle mixed valid and invalid fields" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema edge cases should preserve content structure exactly" name="Post Validation Schemas postPatchSchema edge cases should preserve content structure exactly" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema type safety should accept various data types for content field" name="Post Validation Schemas postPatchSchema type safety should accept various data types for content field" time="0.001">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema type safety should reject invalid title types" name="Post Validation Schemas postPatchSchema type safety should reject invalid title types" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema real-world scenarios should handle typical blog post update" name="Post Validation Schemas postPatchSchema real-world scenarios should handle typical blog post update" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema real-world scenarios should handle title-only update" name="Post Validation Schemas postPatchSchema real-world scenarios should handle title-only update" time="0">
    </testcase>
    <testcase classname="Post Validation Schemas postPatchSchema real-world scenarios should handle content-only update" name="Post Validation Schemas postPatchSchema real-world scenarios should handle content-only update" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="NextAuth configuration" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.085" tests="17">
    <testcase classname="NextAuth configuration authOptions configuration should have correct session strategy" name="NextAuth configuration authOptions configuration should have correct session strategy" time="0.001">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have correct pages configuration" name="NextAuth configuration authOptions configuration should have correct pages configuration" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have credentials provider configured" name="NextAuth configuration authOptions configuration should have credentials provider configured" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have proper cookie security settings" name="NextAuth configuration authOptions configuration should have proper cookie security settings" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have secure cookies in production" name="NextAuth configuration authOptions configuration should have secure cookies in production" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have debug enabled in development" name="NextAuth configuration authOptions configuration should have debug enabled in development" time="0">
    </testcase>
    <testcase classname="NextAuth configuration provider configuration should have credentials provider with correct name" name="NextAuth configuration provider configuration should have credentials provider with correct name" time="0">
    </testcase>
    <testcase classname="NextAuth configuration provider configuration should have email and password credentials configured" name="NextAuth configuration provider configuration should have email and password credentials configured" time="0">
    </testcase>
    <testcase classname="NextAuth configuration provider configuration should have authorize function defined" name="NextAuth configuration provider configuration should have authorize function defined" time="0">
    </testcase>
    <testcase classname="NextAuth configuration callbacks configuration should have JWT callback defined" name="NextAuth configuration callbacks configuration should have JWT callback defined" time="0">
    </testcase>
    <testcase classname="NextAuth configuration callbacks configuration should have session callback defined" name="NextAuth configuration callbacks configuration should have session callback defined" time="0">
    </testcase>
    <testcase classname="NextAuth configuration session callback functionality should return session with user data from token" name="NextAuth configuration session callback functionality should return session with user data from token" time="0">
    </testcase>
    <testcase classname="NextAuth configuration session callback functionality should handle missing token data gracefully" name="NextAuth configuration session callback functionality should handle missing token data gracefully" time="0.002">
    </testcase>
    <testcase classname="NextAuth configuration session callback functionality should preserve session structure" name="NextAuth configuration session callback functionality should preserve session structure" time="0.001">
    </testcase>
    <testcase classname="NextAuth configuration authorize function basic validation should return null for missing credentials" name="NextAuth configuration authorize function basic validation should return null for missing credentials" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authorize function basic validation should return null for missing email" name="NextAuth configuration authorize function basic validation should return null for missing email" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authorize function basic validation should return null for missing password" name="NextAuth configuration authorize function basic validation should return null for missing password" time="0">
    </testcase>
  </testsuite>
  <testsuite name="UserRepository" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:52" time="0.175" tests="22">
    <testcase classname="UserRepository findById should find user by ID successfully" name="UserRepository findById should find user by ID successfully" time="0.005">
    </testcase>
    <testcase classname="UserRepository findById should handle validation error for missing ID" name="UserRepository findById should handle validation error for missing ID" time="0.002">
    </testcase>
    <testcase classname="UserRepository findById should handle database errors" name="UserRepository findById should handle database errors" time="0.052">
    </testcase>
    <testcase classname="UserRepository findByEmail should find user by email successfully" name="UserRepository findByEmail should find user by email successfully" time="0.001">
    </testcase>
    <testcase classname="UserRepository findByEmail should return null for non-existent email" name="UserRepository findByEmail should return null for non-existent email" time="0.001">
    </testcase>
    <testcase classname="UserRepository findAvailableOperators should find available operators without filters" name="UserRepository findAvailableOperators should find available operators without filters" time="0.002">
    </testcase>
    <testcase classname="UserRepository findAvailableOperators should find operators with location filter" name="UserRepository findAvailableOperators should find operators with location filter" time="0.003">
    </testcase>
    <testcase classname="UserRepository findAvailableOperators should find operators with certification filter" name="UserRepository findAvailableOperators should find operators with certification filter" time="0.001">
    </testcase>
    <testcase classname="UserRepository create should create user successfully" name="UserRepository create should create user successfully" time="0.002">
    </testcase>
    <testcase classname="UserRepository create should create user with custom role" name="UserRepository create should create user with custom role" time="0.016">
    </testcase>
    <testcase classname="UserRepository create should handle validation errors" name="UserRepository create should handle validation errors" time="0.003">
    </testcase>
    <testcase classname="UserRepository update should update user successfully" name="UserRepository update should update user successfully" time="0.001">
    </testcase>
    <testcase classname="UserRepository submitOperatorApplication should submit operator application successfully" name="UserRepository submitOperatorApplication should submit operator application successfully" time="0.003">
    </testcase>
    <testcase classname="UserRepository submitOperatorApplication should handle validation errors" name="UserRepository submitOperatorApplication should handle validation errors" time="0.002">
    </testcase>
    <testcase classname="UserRepository setOperatorAvailability should set operator availability successfully" name="UserRepository setOperatorAvailability should set operator availability successfully" time="0.001">
    </testcase>
    <testcase classname="UserRepository setOperatorAvailability should handle user not found" name="UserRepository setOperatorAvailability should handle user not found" time="0.012">
    </testcase>
    <testcase classname="UserRepository setOperatorAvailability should handle user not being an operator" name="UserRepository setOperatorAvailability should handle user not being an operator" time="0.004">
    </testcase>
    <testcase classname="UserRepository updateStripeInfo should update Stripe information successfully" name="UserRepository updateStripeInfo should update Stripe information successfully" time="0.002">
    </testcase>
    <testcase classname="UserRepository findByRole should find users by role successfully" name="UserRepository findByRole should find users by role successfully" time="0.001">
    </testcase>
    <testcase classname="UserRepository verifyEmail should verify user email successfully" name="UserRepository verifyEmail should verify user email successfully" time="0.001">
    </testcase>
    <testcase classname="UserRepository delete should delete user successfully" name="UserRepository delete should delete user successfully" time="0.002">
    </testcase>
    <testcase classname="UserRepository count should count users successfully" name="UserRepository count should count users successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="User Validation Schemas" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.153" tests="25">
    <testcase classname="User Validation Schemas userNameSchema should validate valid names" name="User Validation Schemas userNameSchema should validate valid names" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userNameSchema should reject names that are too short" name="User Validation Schemas userNameSchema should reject names that are too short" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userNameSchema should reject names that are too long" name="User Validation Schemas userNameSchema should reject names that are too long" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userNameSchema should reject missing name field" name="User Validation Schemas userNameSchema should reject missing name field" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userNameSchema should reject non-string name values" name="User Validation Schemas userNameSchema should reject non-string name values" time="0">
    </testcase>
    <testcase classname="User Validation Schemas operatorApplicationSchema should validate valid location" name="User Validation Schemas operatorApplicationSchema should validate valid location" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas operatorApplicationSchema should reject empty location" name="User Validation Schemas operatorApplicationSchema should reject empty location" time="0">
    </testcase>
    <testcase classname="User Validation Schemas operatorApplicationSchema should reject missing location field" name="User Validation Schemas operatorApplicationSchema should reject missing location field" time="0">
    </testcase>
    <testcase classname="User Validation Schemas operatorApplicationSchema should reject non-string location values" name="User Validation Schemas operatorApplicationSchema should reject non-string location values" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema should validate complete valid update data" name="User Validation Schemas userUpdateSchema should validate complete valid update data" time="0.01">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema should validate partial update data (all fields optional)" name="User Validation Schemas userUpdateSchema should validate partial update data (all fields optional)" time="0.002">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema name validation should accept valid names" name="User Validation Schemas userUpdateSchema name validation should accept valid names" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema name validation should reject empty name" name="User Validation Schemas userUpdateSchema name validation should reject empty name" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema name validation should reject name exceeding 100 characters" name="User Validation Schemas userUpdateSchema name validation should reject name exceeding 100 characters" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema phone validation should accept valid phone numbers" name="User Validation Schemas userUpdateSchema phone validation should accept valid phone numbers" time="0.005">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema phone validation should reject phone numbers that are too short" name="User Validation Schemas userUpdateSchema phone validation should reject phone numbers that are too short" time="0.003">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema phone validation should reject phone numbers that are too long" name="User Validation Schemas userUpdateSchema phone validation should reject phone numbers that are too long" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema company validation should accept valid company names" name="User Validation Schemas userUpdateSchema company validation should accept valid company names" time="0.002">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema company validation should reject empty company name" name="User Validation Schemas userUpdateSchema company validation should reject empty company name" time="0.002">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema company validation should reject company name exceeding 100 characters" name="User Validation Schemas userUpdateSchema company validation should reject company name exceeding 100 characters" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema role validation should accept valid roles" name="User Validation Schemas userUpdateSchema role validation should accept valid roles" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema role validation should reject invalid roles" name="User Validation Schemas userUpdateSchema role validation should reject invalid roles" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema type safety should reject non-string values for string fields" name="User Validation Schemas userUpdateSchema type safety should reject non-string values for string fields" time="0.001">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema edge cases should handle undefined values correctly" name="User Validation Schemas userUpdateSchema edge cases should handle undefined values correctly" time="0">
    </testcase>
    <testcase classname="User Validation Schemas userUpdateSchema edge cases should handle mixed valid and invalid fields" name="User Validation Schemas userUpdateSchema edge cases should handle mixed valid and invalid fields" time="0">
    </testcase>
  </testsuite>
  <testsuite name="/api/users/[userId]/operator-application" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.129" tests="17">
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Authentication &amp; Authorization should return 403 when no session exists" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Authentication &amp; Authorization should return 403 when no session exists" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Authentication &amp; Authorization should return 403 when user tries to submit application for different user" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Authentication &amp; Authorization should return 403 when user tries to submit application for different user" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Authentication &amp; Authorization should allow user to submit their own operator application" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Authentication &amp; Authorization should allow user to submit their own operator application" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Data Validation should require location field" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Data Validation should require location field" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Data Validation should validate location is not empty" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Data Validation should validate location is not empty" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Data Validation should accept valid location" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Data Validation should accept valid location" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Business Logic should store location in preferredLocations array" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Business Logic should store location in preferredLocations array" time="0.002">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Business Logic should keep user role as USER (pending admin approval)" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Business Logic should keep user role as USER (pending admin approval)" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Business Logic should return success response with application data" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Business Logic should return success response with application data" time="0.004">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Route Context Validation should validate userId parameter" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Route Context Validation should validate userId parameter" time="0.003">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Route Context Validation should handle empty userId parameter" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Route Context Validation should handle empty userId parameter" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Error Handling should handle database errors gracefully" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Error Handling should handle database errors gracefully" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Error Handling should handle malformed JSON gracefully" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Error Handling should handle malformed JSON gracefully" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Error Handling should handle session retrieval errors" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Error Handling should handle session retrieval errors" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Edge Cases should handle locations with special characters" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Edge Cases should handle locations with special characters" time="0.001">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Edge Cases should handle very long location names" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Edge Cases should handle very long location names" time="0.004">
    </testcase>
    <testcase classname="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Edge Cases should handle locations with commas and special formatting" name="/api/users/[userId]/operator-application POST /api/users/[userId]/operator-application Edge Cases should handle locations with commas and special formatting" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="/api/geocoding" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.158" tests="18">
    <testcase classname="/api/geocoding GET /api/geocoding Query Parameter Validation should return empty array when no query parameter" name="/api/geocoding GET /api/geocoding Query Parameter Validation should return empty array when no query parameter" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Query Parameter Validation should return empty array when query is too short" name="/api/geocoding GET /api/geocoding Query Parameter Validation should return empty array when query is too short" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Query Parameter Validation should return empty array when query is empty string" name="/api/geocoding GET /api/geocoding Query Parameter Validation should return empty array when query is empty string" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Query Parameter Validation should accept query with minimum 3 characters" name="/api/geocoding GET /api/geocoding Query Parameter Validation should accept query with minimum 3 characters" time="0.003">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Nominatim API Integration should proxy request to Nominatim with correct parameters" name="/api/geocoding GET /api/geocoding Nominatim API Integration should proxy request to Nominatim with correct parameters" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Nominatim API Integration should return sanitized geocoding results" name="/api/geocoding GET /api/geocoding Nominatim API Integration should return sanitized geocoding results" time="0">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Error Handling should return empty array when Nominatim API fails" name="/api/geocoding GET /api/geocoding Error Handling should return empty array when Nominatim API fails" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Error Handling should return empty array when fetch throws an error" name="/api/geocoding GET /api/geocoding Error Handling should return empty array when fetch throws an error" time="0">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Error Handling should return empty array when Nominatim returns invalid JSON" name="/api/geocoding GET /api/geocoding Error Handling should return empty array when Nominatim returns invalid JSON" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Response Headers should include proper content-type header" name="/api/geocoding GET /api/geocoding Response Headers should include proper content-type header" time="0">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Response Headers should include cache-control header for successful responses" name="/api/geocoding GET /api/geocoding Response Headers should include cache-control header for successful responses" time="0">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Response Headers should include content-type header for error responses" name="/api/geocoding GET /api/geocoding Response Headers should include content-type header for error responses" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Edge Cases should handle special characters in query" name="/api/geocoding GET /api/geocoding Edge Cases should handle special characters in query" time="0.006">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Edge Cases should handle very long query strings" name="/api/geocoding GET /api/geocoding Edge Cases should handle very long query strings" time="0.003">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Edge Cases should handle queries with multiple spaces" name="/api/geocoding GET /api/geocoding Edge Cases should handle queries with multiple spaces" time="0.002">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Edge Cases should handle empty Nominatim response array" name="/api/geocoding GET /api/geocoding Edge Cases should handle empty Nominatim response array" time="0.016">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Edge Cases should handle malformed Nominatim response objects" name="/api/geocoding GET /api/geocoding Edge Cases should handle malformed Nominatim response objects" time="0.001">
    </testcase>
    <testcase classname="/api/geocoding GET /api/geocoding Edge Cases should handle null/undefined query parameter gracefully" name="/api/geocoding GET /api/geocoding Edge Cases should handle null/undefined query parameter gracefully" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="auth validations" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.062" tests="26">
    <testcase classname="auth validations userAuthSchema should validate valid email" name="auth validations userAuthSchema should validate valid email" time="0">
    </testcase>
    <testcase classname="auth validations userAuthSchema should reject invalid email format" name="auth validations userAuthSchema should reject invalid email format" time="0.001">
    </testcase>
    <testcase classname="auth validations userAuthSchema should reject missing email" name="auth validations userAuthSchema should reject missing email" time="0">
    </testcase>
    <testcase classname="auth validations userLoginSchema should validate valid login data" name="auth validations userLoginSchema should validate valid login data" time="0">
    </testcase>
    <testcase classname="auth validations userLoginSchema should reject invalid email in login" name="auth validations userLoginSchema should reject invalid email in login" time="0">
    </testcase>
    <testcase classname="auth validations userLoginSchema should reject empty password in login" name="auth validations userLoginSchema should reject empty password in login" time="0">
    </testcase>
    <testcase classname="auth validations userLoginSchema should reject missing fields in login" name="auth validations userLoginSchema should reject missing fields in login" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema should validate valid registration data" name="auth validations userRegisterSchema should validate valid registration data" time="0.001">
    </testcase>
    <testcase classname="auth validations userRegisterSchema name validation should reject name shorter than 2 characters" name="auth validations userRegisterSchema name validation should reject name shorter than 2 characters" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema name validation should accept name with 2 characters" name="auth validations userRegisterSchema name validation should accept name with 2 characters" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema name validation should reject missing name" name="auth validations userRegisterSchema name validation should reject missing name" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password shorter than 12 characters" name="auth validations userRegisterSchema password validation should reject password shorter than 12 characters" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password without uppercase letter" name="auth validations userRegisterSchema password validation should reject password without uppercase letter" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password without lowercase letter" name="auth validations userRegisterSchema password validation should reject password without lowercase letter" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password without number" name="auth validations userRegisterSchema password validation should reject password without number" time="0.001">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password without special character" name="auth validations userRegisterSchema password validation should reject password without special character" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password with common words" name="auth validations userRegisterSchema password validation should reject password with common words" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password with keyboard patterns" name="auth validations userRegisterSchema password validation should reject password with keyboard patterns" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should reject password with repeated characters" name="auth validations userRegisterSchema password validation should reject password with repeated characters" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password validation should accept strong password meeting all criteria" name="auth validations userRegisterSchema password validation should accept strong password meeting all criteria" time="0.001">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password confirmation should reject when passwords do not match" name="auth validations userRegisterSchema password confirmation should reject when passwords do not match" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema password confirmation should accept when passwords match exactly" name="auth validations userRegisterSchema password confirmation should accept when passwords match exactly" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema email validation in registration should reject invalid email formats" name="auth validations userRegisterSchema email validation in registration should reject invalid email formats" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema email validation in registration should accept valid email formats" name="auth validations userRegisterSchema email validation in registration should accept valid email formats" time="0">
    </testcase>
    <testcase classname="auth validations userRegisterSchema complete validation scenarios should provide detailed error messages for multiple validation failures" name="auth validations userRegisterSchema complete validation scenarios should provide detailed error messages for multiple validation failures" time="0.001">
    </testcase>
    <testcase classname="auth validations userRegisterSchema complete validation scenarios should handle missing required fields" name="auth validations userRegisterSchema complete validation scenarios should handle missing required fields" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Service Request Validation Schemas" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.153" tests="40">
    <testcase classname="Service Request Validation Schemas serviceRequestSchema should validate complete valid service request data" name="Service Request Validation Schemas serviceRequestSchema should validate complete valid service request data" time="0.003">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema title validation should accept valid titles" name="Service Request Validation Schemas serviceRequestSchema title validation should accept valid titles" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema title validation should reject empty title" name="Service Request Validation Schemas serviceRequestSchema title validation should reject empty title" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema title validation should reject title exceeding 200 characters" name="Service Request Validation Schemas serviceRequestSchema title validation should reject title exceeding 200 characters" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema description validation should accept valid descriptions" name="Service Request Validation Schemas serviceRequestSchema description validation should accept valid descriptions" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema description validation should reject description exceeding 1000 characters" name="Service Request Validation Schemas serviceRequestSchema description validation should reject description exceeding 1000 characters" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema contact information validation should validate contact name" name="Service Request Validation Schemas serviceRequestSchema contact information validation should validate contact name" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema contact information validation should validate contact email" name="Service Request Validation Schemas serviceRequestSchema contact information validation should validate contact email" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema contact information validation should validate contact phone" name="Service Request Validation Schemas serviceRequestSchema contact information validation should validate contact phone" time="0.007">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema contact information validation should validate optional company field" name="Service Request Validation Schemas serviceRequestSchema contact information validation should validate optional company field" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema job details validation should validate job site" name="Service Request Validation Schemas serviceRequestSchema job details validation should validate job site" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema job details validation should validate transport options" name="Service Request Validation Schemas serviceRequestSchema job details validation should validate transport options" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema job details validation should validate start date" name="Service Request Validation Schemas serviceRequestSchema job details validation should validate start date" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema job details validation should validate optional end date" name="Service Request Validation Schemas serviceRequestSchema job details validation should validate optional end date" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema equipment validation should validate equipment categories" name="Service Request Validation Schemas serviceRequestSchema equipment validation should validate equipment categories" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema equipment validation should validate equipment detail" name="Service Request Validation Schemas serviceRequestSchema equipment validation should validate equipment detail" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate duration type" name="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate duration type" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate duration value" name="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate duration value" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate total hours" name="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate total hours" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate rate type" name="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate rate type" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate base rate" name="Service Request Validation Schemas serviceRequestSchema duration and pricing validation should validate base rate" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestSchema required fields validation should reject missing required fields" name="Service Request Validation Schemas serviceRequestSchema required fields validation should reject missing required fields" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestUpdateSchema should validate partial updates (all fields optional)" name="Service Request Validation Schemas serviceRequestUpdateSchema should validate partial updates (all fields optional)" time="0.008">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestUpdateSchema should validate status updates" name="Service Request Validation Schemas serviceRequestUpdateSchema should validate status updates" time="0.01">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestUpdateSchema should validate priority updates" name="Service Request Validation Schemas serviceRequestUpdateSchema should validate priority updates" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas serviceRequestUpdateSchema should validate monetary fields" name="Service Request Validation Schemas serviceRequestUpdateSchema should validate monetary fields" time="0.003">
    </testcase>
    <testcase classname="Service Request Validation Schemas statusChangeSchema should validate complete status change" name="Service Request Validation Schemas statusChangeSchema should validate complete status change" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas statusChangeSchema should validate minimal status change" name="Service Request Validation Schemas statusChangeSchema should validate minimal status change" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas statusChangeSchema should reject missing required fields" name="Service Request Validation Schemas statusChangeSchema should reject missing required fields" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas statusChangeSchema should validate status transitions" name="Service Request Validation Schemas statusChangeSchema should validate status transitions" time="0.03">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for HALF_DAY" name="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for HALF_DAY" time="0.002">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for FULL_DAY" name="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for FULL_DAY" time="0.002">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for MULTI_DAY" name="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for MULTI_DAY" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for WEEKLY" name="Service Request Validation Schemas helper functions calculateTotalHours should calculate hours for WEEKLY" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions calculateTotalHours should return default for invalid duration type" name="Service Request Validation Schemas helper functions calculateTotalHours should return default for invalid duration type" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions getDurationDisplayText should format HALF_DAY display text" name="Service Request Validation Schemas helper functions getDurationDisplayText should format HALF_DAY display text" time="0.001">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions getDurationDisplayText should format FULL_DAY display text" name="Service Request Validation Schemas helper functions getDurationDisplayText should format FULL_DAY display text" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions getDurationDisplayText should format MULTI_DAY display text" name="Service Request Validation Schemas helper functions getDurationDisplayText should format MULTI_DAY display text" time="0.007">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions getDurationDisplayText should format WEEKLY display text" name="Service Request Validation Schemas helper functions getDurationDisplayText should format WEEKLY display text" time="0">
    </testcase>
    <testcase classname="Service Request Validation Schemas helper functions getDurationDisplayText should handle invalid duration type" name="Service Request Validation Schemas helper functions getDurationDisplayText should handle invalid duration type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="AuthService" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.079" tests="26">
    <testcase classname="AuthService constructor should initialize with AuthService name" name="AuthService constructor should initialize with AuthService name" time="0.001">
    </testcase>
    <testcase classname="AuthService authenticate should authenticate user with valid credentials" name="AuthService authenticate should authenticate user with valid credentials" time="0">
    </testcase>
    <testcase classname="AuthService authenticate should fail authentication with invalid email" name="AuthService authenticate should fail authentication with invalid email" time="0.004">
    </testcase>
    <testcase classname="AuthService authenticate should fail authentication with invalid password" name="AuthService authenticate should fail authentication with invalid password" time="0.003">
    </testcase>
    <testcase classname="AuthService authenticate should fail authentication when user has no password" name="AuthService authenticate should fail authentication when user has no password" time="0">
    </testcase>
    <testcase classname="AuthService authenticate should validate required credentials" name="AuthService authenticate should validate required credentials" time="0.001">
    </testcase>
    <testcase classname="AuthService authenticate should log authentication attempts" name="AuthService authenticate should log authentication attempts" time="0">
    </testcase>
    <testcase classname="AuthService register should register new user successfully" name="AuthService register should register new user successfully" time="0">
    </testcase>
    <testcase classname="AuthService register should fail registration if user already exists" name="AuthService register should fail registration if user already exists" time="0">
    </testcase>
    <testcase classname="AuthService register should validate required registration data" name="AuthService register should validate required registration data" time="0">
    </testcase>
    <testcase classname="AuthService register should handle registration with minimal data" name="AuthService register should handle registration with minimal data" time="0.002">
    </testcase>
    <testcase classname="AuthService getUserById should get user by ID successfully" name="AuthService getUserById should get user by ID successfully" time="0">
    </testcase>
    <testcase classname="AuthService getUserById should fail when user not found" name="AuthService getUserById should fail when user not found" time="0.001">
    </testcase>
    <testcase classname="AuthService getUserById should validate required userId" name="AuthService getUserById should validate required userId" time="0">
    </testcase>
    <testcase classname="AuthService getUserByEmail should get user by email successfully" name="AuthService getUserByEmail should get user by email successfully" time="0">
    </testcase>
    <testcase classname="AuthService getUserByEmail should fail when user not found" name="AuthService getUserByEmail should fail when user not found" time="0">
    </testcase>
    <testcase classname="AuthService updateUser should update user successfully" name="AuthService updateUser should update user successfully" time="0">
    </testcase>
    <testcase classname="AuthService updateUser should validate required userId" name="AuthService updateUser should validate required userId" time="0">
    </testcase>
    <testcase classname="AuthService changePassword should change password successfully" name="AuthService changePassword should change password successfully" time="0.001">
    </testcase>
    <testcase classname="AuthService changePassword should fail with incorrect current password" name="AuthService changePassword should fail with incorrect current password" time="0">
    </testcase>
    <testcase classname="AuthService changePassword should fail when user not found" name="AuthService changePassword should fail when user not found" time="0">
    </testcase>
    <testcase classname="AuthService validateSessionData should validate correct session data" name="AuthService validateSessionData should validate correct session data" time="0">
    </testcase>
    <testcase classname="AuthService validateSessionData should reject invalid session data" name="AuthService validateSessionData should reject invalid session data" time="0.004">
    </testcase>
    <testcase classname="AuthService validateAuthUser should validate correct auth user" name="AuthService validateAuthUser should validate correct auth user" time="0">
    </testcase>
    <testcase classname="AuthService validateAuthUser should reject invalid auth user data" name="AuthService validateAuthUser should reject invalid auth user data" time="0">
    </testcase>
    <testcase classname="AuthService validateAuthUser should accept null name and image" name="AuthService validateAuthUser should accept null name and image" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="/api/users/stripe" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.064" tests="13">
    <testcase classname="/api/users/stripe GET /api/users/stripe Authentication should return 403 when no session exists" name="/api/users/stripe GET /api/users/stripe Authentication should return 403 when no session exists" time="0.002">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Authentication should return 403 when session has no user" name="/api/users/stripe GET /api/users/stripe Authentication should return 403 when session has no user" time="0.001">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Authentication should return 403 when user has no email" name="/api/users/stripe GET /api/users/stripe Authentication should return 403 when user has no email" time="0">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Pro Plan - Billing Portal should create billing portal session for pro users" name="/api/users/stripe GET /api/users/stripe Pro Plan - Billing Portal should create billing portal session for pro users" time="0.001">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Pro Plan - Billing Portal should handle billing portal creation errors" name="/api/users/stripe GET /api/users/stripe Pro Plan - Billing Portal should handle billing portal creation errors" time="0">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Free Plan - Checkout Session should create checkout session for free users" name="/api/users/stripe GET /api/users/stripe Free Plan - Checkout Session should create checkout session for free users" time="0.001">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Free Plan - Checkout Session should create checkout session for pro users without customer ID" name="/api/users/stripe GET /api/users/stripe Free Plan - Checkout Session should create checkout session for pro users without customer ID" time="0.001">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Free Plan - Checkout Session should handle checkout session creation errors" name="/api/users/stripe GET /api/users/stripe Free Plan - Checkout Session should handle checkout session creation errors" time="0.001">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Error Handling should handle subscription plan retrieval errors" name="/api/users/stripe GET /api/users/stripe Error Handling should handle subscription plan retrieval errors" time="0">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Error Handling should handle session retrieval errors" name="/api/users/stripe GET /api/users/stripe Error Handling should handle session retrieval errors" time="0">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Error Handling should handle unexpected errors gracefully" name="/api/users/stripe GET /api/users/stripe Error Handling should handle unexpected errors gracefully" time="0">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Edge Cases should handle empty stripe customer ID" name="/api/users/stripe GET /api/users/stripe Edge Cases should handle empty stripe customer ID" time="0">
    </testcase>
    <testcase classname="/api/users/stripe GET /api/users/stripe Edge Cases should handle special characters in user email" name="/api/users/stripe GET /api/users/stripe Edge Cases should handle special characters in user email" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Permissions System" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.072" tests="44">
    <testcase classname="Permissions System ROLE_PERMISSIONS constant should have permissions for all roles" name="Permissions System ROLE_PERMISSIONS constant should have permissions for all roles" time="0">
    </testcase>
    <testcase classname="Permissions System ROLE_PERMISSIONS constant should have proper permission inheritance" name="Permissions System ROLE_PERMISSIONS constant should have proper permission inheritance" time="0.008">
    </testcase>
    <testcase classname="Permissions System ROLE_PERMISSIONS constant should have unique permissions per role level" name="Permissions System ROLE_PERMISSIONS constant should have unique permissions per role level" time="0.001">
    </testcase>
    <testcase classname="Permissions System hasPermission function should return true for valid role-permission combinations" name="Permissions System hasPermission function should return true for valid role-permission combinations" time="0">
    </testcase>
    <testcase classname="Permissions System hasPermission function should return false for invalid role-permission combinations" name="Permissions System hasPermission function should return false for invalid role-permission combinations" time="0.001">
    </testcase>
    <testcase classname="Permissions System hasPermission function should handle invalid permissions gracefully" name="Permissions System hasPermission function should handle invalid permissions gracefully" time="0">
    </testcase>
    <testcase classname="Permissions System hasPermission function should handle invalid roles gracefully" name="Permissions System hasPermission function should handle invalid roles gracefully" time="0">
    </testcase>
    <testcase classname="Permissions System getUserPermissions function should return correct permissions for each role" name="Permissions System getUserPermissions function should return correct permissions for each role" time="0">
    </testcase>
    <testcase classname="Permissions System getUserPermissions function should return empty array for invalid role" name="Permissions System getUserPermissions function should return empty array for invalid role" time="0">
    </testcase>
    <testcase classname="Permissions System getUserPermissions function should return arrays without duplicates" name="Permissions System getUserPermissions function should return arrays without duplicates" time="0.001">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function public and general routes should allow access to routes with no specific requirements" name="Permissions System canAccessRoute function public and general routes should allow access to routes with no specific requirements" time="0">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function public and general routes should allow access to undefined routes (public routes)" name="Permissions System canAccessRoute function public and general routes should allow access to undefined routes (public routes)" time="0.001">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function user-level routes should allow users to access basic dashboard routes" name="Permissions System canAccessRoute function user-level routes should allow users to access basic dashboard routes" time="0">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function user-level routes should prevent users from accessing higher-level routes" name="Permissions System canAccessRoute function user-level routes should prevent users from accessing higher-level routes" time="0.001">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function operator-level routes should allow operators to access operator routes" name="Permissions System canAccessRoute function operator-level routes should allow operators to access operator routes" time="0.005">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function operator-level routes should allow operators to access user routes (inheritance)" name="Permissions System canAccessRoute function operator-level routes should allow operators to access user routes (inheritance)" time="0.001">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function operator-level routes should prevent operators from accessing manager/admin routes" name="Permissions System canAccessRoute function operator-level routes should prevent operators from accessing manager/admin routes" time="0">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function manager-level routes should allow managers to access manager routes" name="Permissions System canAccessRoute function manager-level routes should allow managers to access manager routes" time="0.001">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function manager-level routes should allow managers to access lower-level routes (inheritance)" name="Permissions System canAccessRoute function manager-level routes should allow managers to access lower-level routes (inheritance)" time="0">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function manager-level routes should prevent managers from accessing admin routes" name="Permissions System canAccessRoute function manager-level routes should prevent managers from accessing admin routes" time="0.001">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function admin-level routes should allow admins to access all routes" name="Permissions System canAccessRoute function admin-level routes should allow admins to access all routes" time="0">
    </testcase>
    <testcase classname="Permissions System canAccessRoute function admin-level routes should allow admins to access all lower-level routes" name="Permissions System canAccessRoute function admin-level routes should allow admins to access all lower-level routes" time="0.001">
    </testcase>
    <testcase classname="Permissions System ROLE_HIERARCHY constant should have correct hierarchy order" name="Permissions System ROLE_HIERARCHY constant should have correct hierarchy order" time="0">
    </testcase>
    <testcase classname="Permissions System ROLE_HIERARCHY constant should have ascending values" name="Permissions System ROLE_HIERARCHY constant should have ascending values" time="0.001">
    </testcase>
    <testcase classname="Permissions System hasHigherRole function should return true for higher roles" name="Permissions System hasHigherRole function should return true for higher roles" time="0">
    </testcase>
    <testcase classname="Permissions System hasHigherRole function should return false for equal or lower roles" name="Permissions System hasHigherRole function should return false for equal or lower roles" time="0.002">
    </testcase>
    <testcase classname="Permissions System hasEqualOrHigherRole function should return true for equal roles" name="Permissions System hasEqualOrHigherRole function should return true for equal roles" time="0">
    </testcase>
    <testcase classname="Permissions System hasEqualOrHigherRole function should return true for higher roles" name="Permissions System hasEqualOrHigherRole function should return true for higher roles" time="0.001">
    </testcase>
    <testcase classname="Permissions System hasEqualOrHigherRole function should return false for lower roles" name="Permissions System hasEqualOrHigherRole function should return false for lower roles" time="0">
    </testcase>
    <testcase classname="Permissions System getLowerRoles function should return correct lower roles for each role" name="Permissions System getLowerRoles function should return correct lower roles for each role" time="0">
    </testcase>
    <testcase classname="Permissions System getLowerRoles function should return roles in correct order" name="Permissions System getLowerRoles function should return roles in correct order" time="0">
    </testcase>
    <testcase classname="Permissions System canManageUser function should allow admins to manage everyone" name="Permissions System canManageUser function should allow admins to manage everyone" time="0">
    </testcase>
    <testcase classname="Permissions System canManageUser function should allow managers to manage users and operators" name="Permissions System canManageUser function should allow managers to manage users and operators" time="0">
    </testcase>
    <testcase classname="Permissions System canManageUser function should not allow users and operators to manage others" name="Permissions System canManageUser function should not allow users and operators to manage others" time="0">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should return base routes for all roles" name="Permissions System getAvailableDashboardRoutes function should return base routes for all roles" time="0.001">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should return only base routes for USER role" name="Permissions System getAvailableDashboardRoutes function should return only base routes for USER role" time="0">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should return operator-specific routes for OPERATOR role" name="Permissions System getAvailableDashboardRoutes function should return operator-specific routes for OPERATOR role" time="0">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should return manager-specific routes for MANAGER role" name="Permissions System getAvailableDashboardRoutes function should return manager-specific routes for MANAGER role" time="0">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should return admin-specific routes for ADMIN role" name="Permissions System getAvailableDashboardRoutes function should return admin-specific routes for ADMIN role" time="0">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should return routes with proper structure" name="Permissions System getAvailableDashboardRoutes function should return routes with proper structure" time="0.003">
    </testcase>
    <testcase classname="Permissions System getAvailableDashboardRoutes function should have increasing route counts with higher roles" name="Permissions System getAvailableDashboardRoutes function should have increasing route counts with higher roles" time="0.001">
    </testcase>
    <testcase classname="Permissions System edge cases and error handling should handle undefined and null values gracefully" name="Permissions System edge cases and error handling should handle undefined and null values gracefully" time="0">
    </testcase>
    <testcase classname="Permissions System edge cases and error handling should handle empty strings gracefully" name="Permissions System edge cases and error handling should handle empty strings gracefully" time="0">
    </testcase>
    <testcase classname="Permissions System edge cases and error handling should be case sensitive for roles and permissions" name="Permissions System edge cases and error handling should be case sensitive for roles and permissions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="/api/webhooks/stripe" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.07" tests="13">
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Webhook Signature Verification should return 400 when signature verification fails" name="/api/webhooks/stripe POST /api/webhooks/stripe Webhook Signature Verification should return 400 when signature verification fails" time="0.001">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Webhook Signature Verification should return 400 when STRIPE_WEBHOOK_SECRET is not configured" name="/api/webhooks/stripe POST /api/webhooks/stripe Webhook Signature Verification should return 400 when STRIPE_WEBHOOK_SECRET is not configured" time="0.001">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Webhook Signature Verification should verify webhook signature correctly" name="/api/webhooks/stripe POST /api/webhooks/stripe Webhook Signature Verification should verify webhook signature correctly" time="0">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe checkout.session.completed Event should handle checkout session completed successfully" name="/api/webhooks/stripe POST /api/webhooks/stripe checkout.session.completed Event should handle checkout session completed successfully" time="0.001">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe checkout.session.completed Event should handle subscription retrieval errors" name="/api/webhooks/stripe POST /api/webhooks/stripe checkout.session.completed Event should handle subscription retrieval errors" time="0.005">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe checkout.session.completed Event should handle database update errors" name="/api/webhooks/stripe POST /api/webhooks/stripe checkout.session.completed Event should handle database update errors" time="0.001">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe invoice.payment_succeeded Event should handle invoice payment succeeded successfully" name="/api/webhooks/stripe POST /api/webhooks/stripe invoice.payment_succeeded Event should handle invoice payment succeeded successfully" time="0">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe invoice.payment_succeeded Event should handle subscription renewal errors" name="/api/webhooks/stripe POST /api/webhooks/stripe invoice.payment_succeeded Event should handle subscription renewal errors" time="0">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Unsupported Event Types should handle unsupported event types gracefully" name="/api/webhooks/stripe POST /api/webhooks/stripe Unsupported Event Types should handle unsupported event types gracefully" time="0">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle missing metadata in checkout session" name="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle missing metadata in checkout session" time="0.001">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle missing subscription ID" name="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle missing subscription ID" time="0">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle empty request body" name="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle empty request body" time="0.001">
    </testcase>
    <testcase classname="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle missing Stripe signature header" name="/api/webhooks/stripe POST /api/webhooks/stripe Edge Cases should handle missing Stripe signature header" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CardSkeleton Snapshots" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.074" tests="1">
    <testcase classname="CardSkeleton Snapshots matches snapshot" name="CardSkeleton Snapshots matches snapshot" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="NextAuth configuration" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.047" tests="17">
    <testcase classname="NextAuth configuration authOptions configuration should have correct session strategy" name="NextAuth configuration authOptions configuration should have correct session strategy" time="0.001">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have correct pages configuration" name="NextAuth configuration authOptions configuration should have correct pages configuration" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have credentials provider configured" name="NextAuth configuration authOptions configuration should have credentials provider configured" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have proper cookie security settings" name="NextAuth configuration authOptions configuration should have proper cookie security settings" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have secure cookies in production" name="NextAuth configuration authOptions configuration should have secure cookies in production" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authOptions configuration should have debug enabled in development" name="NextAuth configuration authOptions configuration should have debug enabled in development" time="0.001">
    </testcase>
    <testcase classname="NextAuth configuration provider configuration should have credentials provider with correct name" name="NextAuth configuration provider configuration should have credentials provider with correct name" time="0">
    </testcase>
    <testcase classname="NextAuth configuration provider configuration should have email and password credentials configured" name="NextAuth configuration provider configuration should have email and password credentials configured" time="0">
    </testcase>
    <testcase classname="NextAuth configuration provider configuration should have authorize function defined" name="NextAuth configuration provider configuration should have authorize function defined" time="0">
    </testcase>
    <testcase classname="NextAuth configuration callbacks configuration should have JWT callback defined" name="NextAuth configuration callbacks configuration should have JWT callback defined" time="0">
    </testcase>
    <testcase classname="NextAuth configuration callbacks configuration should have session callback defined" name="NextAuth configuration callbacks configuration should have session callback defined" time="0">
    </testcase>
    <testcase classname="NextAuth configuration session callback functionality should return session with user data from token" name="NextAuth configuration session callback functionality should return session with user data from token" time="0">
    </testcase>
    <testcase classname="NextAuth configuration session callback functionality should handle missing token data gracefully" name="NextAuth configuration session callback functionality should handle missing token data gracefully" time="0">
    </testcase>
    <testcase classname="NextAuth configuration session callback functionality should preserve session structure" name="NextAuth configuration session callback functionality should preserve session structure" time="0.004">
    </testcase>
    <testcase classname="NextAuth configuration authorize function basic validation should return null for missing credentials" name="NextAuth configuration authorize function basic validation should return null for missing credentials" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authorize function basic validation should return null for missing email" name="NextAuth configuration authorize function basic validation should return null for missing email" time="0">
    </testcase>
    <testcase classname="NextAuth configuration authorize function basic validation should return null for missing password" name="NextAuth configuration authorize function basic validation should return null for missing password" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BaseService" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.055" tests="21">
    <testcase classname="BaseService constructor should initialize with service name and logger" name="BaseService constructor should initialize with service name and logger" time="0.001">
    </testcase>
    <testcase classname="BaseService constructor should use ConsoleLogger as default" name="BaseService constructor should use ConsoleLogger as default" time="0">
    </testcase>
    <testcase classname="BaseService createError should create standardized error result" name="BaseService createError should create standardized error result" time="0">
    </testcase>
    <testcase classname="BaseService createError should log error when created" name="BaseService createError should log error when created" time="0.001">
    </testcase>
    <testcase classname="BaseService createSuccess should create successful result with data" name="BaseService createSuccess should create successful result with data" time="0">
    </testcase>
    <testcase classname="BaseService handleAsync should handle successful async operations" name="BaseService handleAsync should handle successful async operations" time="0">
    </testcase>
    <testcase classname="BaseService handleAsync should handle async operation errors" name="BaseService handleAsync should handle async operation errors" time="0.011">
    </testcase>
    <testcase classname="BaseService handleAsync should handle non-Error exceptions" name="BaseService handleAsync should handle non-Error exceptions" time="0">
    </testcase>
    <testcase classname="BaseService validateRequired should pass validation when all required fields are present" name="BaseService validateRequired should pass validation when all required fields are present" time="0.001">
    </testcase>
    <testcase classname="BaseService validateRequired should fail validation when required fields are missing" name="BaseService validateRequired should fail validation when required fields are missing" time="0.003">
    </testcase>
    <testcase classname="BaseService validateRequired should fail validation for null values" name="BaseService validateRequired should fail validation for null values" time="0.001">
    </testcase>
    <testcase classname="BaseService validateRequired should fail validation for undefined values" name="BaseService validateRequired should fail validation for undefined values" time="0.001">
    </testcase>
    <testcase classname="BaseService validateRequired should fail validation for empty strings" name="BaseService validateRequired should fail validation for empty strings" time="0">
    </testcase>
    <testcase classname="BaseService logOperation should log operation with service name" name="BaseService logOperation should log operation with service name" time="0">
    </testcase>
    <testcase classname="BaseService logOperation should log operation with metadata" name="BaseService logOperation should log operation with metadata" time="0.001">
    </testcase>
    <testcase classname="BaseService getServiceName should return the service name" name="BaseService getServiceName should return the service name" time="0">
    </testcase>
    <testcase classname="ConsoleLogger should log info messages" name="ConsoleLogger should log info messages" time="0">
    </testcase>
    <testcase classname="ConsoleLogger should log warn messages" name="ConsoleLogger should log warn messages" time="0.001">
    </testcase>
    <testcase classname="ConsoleLogger should log error messages" name="ConsoleLogger should log error messages" time="0">
    </testcase>
    <testcase classname="ConsoleLogger should log debug messages in development" name="ConsoleLogger should log debug messages in development" time="0">
    </testcase>
    <testcase classname="ConsoleLogger should not log debug messages in production" name="ConsoleLogger should not log debug messages in production" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BaseRepository" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.085" tests="21">
    <testcase classname="BaseRepository constructor should initialize with default options" name="BaseRepository constructor should initialize with default options" time="0">
    </testcase>
    <testcase classname="BaseRepository constructor should initialize with custom options" name="BaseRepository constructor should initialize with custom options" time="0">
    </testcase>
    <testcase classname="BaseRepository error handling should create standardized error result" name="BaseRepository error handling should create standardized error result" time="0">
    </testcase>
    <testcase classname="BaseRepository error handling should create success result" name="BaseRepository error handling should create success result" time="0">
    </testcase>
    <testcase classname="BaseRepository error handling should create success result with pagination" name="BaseRepository error handling should create success result with pagination" time="0.001">
    </testcase>
    <testcase classname="BaseRepository async operation handling should handle successful async operations" name="BaseRepository async operation handling should handle successful async operations" time="0">
    </testcase>
    <testcase classname="BaseRepository async operation handling should handle failed async operations" name="BaseRepository async operation handling should handle failed async operations" time="0.004">
    </testcase>
    <testcase classname="BaseRepository async operation handling should handle Prisma client errors" name="BaseRepository async operation handling should handle Prisma client errors" time="0">
    </testcase>
    <testcase classname="BaseRepository validation should validate required parameters successfully" name="BaseRepository validation should validate required parameters successfully" time="0.001">
    </testcase>
    <testcase classname="BaseRepository validation should fail validation for missing parameters" name="BaseRepository validation should fail validation for missing parameters" time="0">
    </testcase>
    <testcase classname="BaseRepository validation should fail validation for null/undefined parameters" name="BaseRepository validation should fail validation for null/undefined parameters" time="0">
    </testcase>
    <testcase classname="BaseRepository pagination should build pagination metadata correctly" name="BaseRepository pagination should build pagination metadata correctly" time="0">
    </testcase>
    <testcase classname="BaseRepository pagination should handle first page pagination" name="BaseRepository pagination should handle first page pagination" time="0">
    </testcase>
    <testcase classname="BaseRepository pagination should handle last page pagination" name="BaseRepository pagination should handle last page pagination" time="0.001">
    </testcase>
    <testcase classname="BaseRepository query building should apply filters to base query" name="BaseRepository query building should apply filters to base query" time="0">
    </testcase>
    <testcase classname="BaseRepository query building should apply pagination to base query" name="BaseRepository query building should apply pagination to base query" time="0">
    </testcase>
    <testcase classname="BaseRepository query building should apply cursor-based pagination" name="BaseRepository query building should apply cursor-based pagination" time="0">
    </testcase>
    <testcase classname="BaseRepository configuration methods should get repository name" name="BaseRepository configuration methods should get repository name" time="0">
    </testcase>
    <testcase classname="BaseRepository configuration methods should manage caching setting" name="BaseRepository configuration methods should manage caching setting" time="0">
    </testcase>
    <testcase classname="BaseRepository configuration methods should manage offline mode" name="BaseRepository configuration methods should manage offline mode" time="0">
    </testcase>
    <testcase classname="BaseRepository logging should log operations" name="BaseRepository logging should log operations" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RepositoryFactory" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.048" tests="23">
    <testcase classname="RepositoryFactory singleton pattern should return the same ServiceRequestRepository instance" name="RepositoryFactory singleton pattern should return the same ServiceRequestRepository instance" time="0.001">
    </testcase>
    <testcase classname="RepositoryFactory singleton pattern should return the same UserRepository instance" name="RepositoryFactory singleton pattern should return the same UserRepository instance" time="0">
    </testcase>
    <testcase classname="RepositoryFactory singleton pattern should create new instances after reset" name="RepositoryFactory singleton pattern should create new instances after reset" time="0">
    </testcase>
    <testcase classname="RepositoryFactory database management should use default database by default" name="RepositoryFactory database management should use default database by default" time="0">
    </testcase>
    <testcase classname="RepositoryFactory database management should use custom database when set" name="RepositoryFactory database management should use custom database when set" time="0.001">
    </testcase>
    <testcase classname="RepositoryFactory database management should reset repositories when database changes" name="RepositoryFactory database management should reset repositories when database changes" time="0">
    </testcase>
    <testcase classname="RepositoryFactory factory methods should create new ServiceRequestRepository with default database" name="RepositoryFactory factory methods should create new ServiceRequestRepository with default database" time="0">
    </testcase>
    <testcase classname="RepositoryFactory factory methods should create new ServiceRequestRepository with custom database" name="RepositoryFactory factory methods should create new ServiceRequestRepository with custom database" time="0">
    </testcase>
    <testcase classname="RepositoryFactory factory methods should create new UserRepository with default database" name="RepositoryFactory factory methods should create new UserRepository with default database" time="0">
    </testcase>
    <testcase classname="RepositoryFactory factory methods should create new UserRepository with custom database" name="RepositoryFactory factory methods should create new UserRepository with custom database" time="0">
    </testcase>
    <testcase classname="RepositoryFactory factory methods should create repositories with custom options" name="RepositoryFactory factory methods should create repositories with custom options" time="0">
    </testcase>
    <testcase classname="RepositoryFactory initialization should initialize all repositories and connect to database" name="RepositoryFactory initialization should initialize all repositories and connect to database" time="0.001">
    </testcase>
    <testcase classname="RepositoryFactory initialization should handle database connection errors" name="RepositoryFactory initialization should handle database connection errors" time="0.006">
    </testcase>
    <testcase classname="RepositoryFactory cleanup should disconnect from database and reset repositories" name="RepositoryFactory cleanup should disconnect from database and reset repositories" time="0">
    </testcase>
    <testcase classname="RepositoryFactory cleanup should handle disconnect errors gracefully" name="RepositoryFactory cleanup should handle disconnect errors gracefully" time="0">
    </testcase>
    <testcase classname="RepositoryFactory cleanup should cleanup custom database" name="RepositoryFactory cleanup should cleanup custom database" time="0">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for getting service requests" name="RepositoryFactory convenience functions should provide convenience function for getting service requests" time="0.001">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for creating service requests" name="RepositoryFactory convenience functions should provide convenience function for creating service requests" time="0">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for getting user by ID" name="RepositoryFactory convenience functions should provide convenience function for getting user by ID" time="0">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for getting user by email" name="RepositoryFactory convenience functions should provide convenience function for getting user by email" time="0">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for creating users" name="RepositoryFactory convenience functions should provide convenience function for creating users" time="0">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for updating users" name="RepositoryFactory convenience functions should provide convenience function for updating users" time="0">
    </testcase>
    <testcase classname="RepositoryFactory convenience functions should provide convenience function for getting available operators" name="RepositoryFactory convenience functions should provide convenience function for getting available operators" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Jest Setup" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.033" tests="2">
    <testcase classname="Jest Setup should be able to run tests" name="Jest Setup should be able to run tests" time="0">
    </testcase>
    <testcase classname="Jest Setup should have environment variables mocked" name="Jest Setup should have environment variables mocked" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Dashboard Service Mobile Compatibility" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.162" tests="19">
    <testcase classname="Dashboard Service Mobile Compatibility Offline Mode Support should enable offline mode without errors" name="Dashboard Service Mobile Compatibility Offline Mode Support should enable offline mode without errors" time="0.002">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Offline Mode Support should disable offline mode without errors" name="Dashboard Service Mobile Compatibility Offline Mode Support should disable offline mode without errors" time="0.002">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Offline Mode Support should handle offline mode configuration" name="Dashboard Service Mobile Compatibility Offline Mode Support should handle offline mode configuration" time="0.002">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Caching Patterns should support mobile-optimized cache TTL" name="Dashboard Service Mobile Compatibility Mobile Caching Patterns should support mobile-optimized cache TTL" time="0.006">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Caching Patterns should handle cache expiration for mobile scenarios" name="Dashboard Service Mobile Compatibility Mobile Caching Patterns should handle cache expiration for mobile scenarios" time="0.01">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Caching Patterns should support cache preloading for mobile apps" name="Dashboard Service Mobile Compatibility Mobile Caching Patterns should support cache preloading for mobile apps" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility React Native Compatibility should work without Next.js dependencies" name="Dashboard Service Mobile Compatibility React Native Compatibility should work without Next.js dependencies" time="0">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility React Native Compatibility should handle React Native AsyncStorage patterns" name="Dashboard Service Mobile Compatibility React Native Compatibility should handle React Native AsyncStorage patterns" time="0">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility React Native Compatibility should support React Native network state handling" name="Dashboard Service Mobile Compatibility React Native Compatibility should support React Native network state handling" time="0.028">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Performance Optimization should handle large datasets efficiently for mobile" name="Dashboard Service Mobile Compatibility Mobile Performance Optimization should handle large datasets efficiently for mobile" time="0.005">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Performance Optimization should support incremental loading for mobile scrolling" name="Dashboard Service Mobile Compatibility Mobile Performance Optimization should support incremental loading for mobile scrolling" time="0.034">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Performance Optimization should minimize data transfer for mobile networks" name="Dashboard Service Mobile Compatibility Mobile Performance Optimization should minimize data transfer for mobile networks" time="0.003">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Error Handling should handle intermittent connectivity gracefully" name="Dashboard Service Mobile Compatibility Mobile Error Handling should handle intermittent connectivity gracefully" time="0.011">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Mobile Error Handling should provide mobile-friendly error messages" name="Dashboard Service Mobile Compatibility Mobile Error Handling should provide mobile-friendly error messages" time="0.002">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Cache Management for Mobile should support cache invalidation patterns" name="Dashboard Service Mobile Compatibility Cache Management for Mobile should support cache invalidation patterns" time="0">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Cache Management for Mobile should handle cache memory management for mobile" name="Dashboard Service Mobile Compatibility Cache Management for Mobile should handle cache memory management for mobile" time="0.006">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Cache Management for Mobile should support cache warming for mobile app startup" name="Dashboard Service Mobile Compatibility Cache Management for Mobile should support cache warming for mobile app startup" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Cross-Platform Data Consistency should maintain consistent data format across platforms" name="Dashboard Service Mobile Compatibility Cross-Platform Data Consistency should maintain consistent data format across platforms" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Mobile Compatibility Cross-Platform Data Consistency should handle timezone differences for mobile users" name="Dashboard Service Mobile Compatibility Cross-Platform Data Consistency should handle timezone differences for mobile users" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Dashboard Service Role Filtering Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.143" tests="14">
    <testcase classname="Dashboard Service Role Filtering Tests USER Role Data Filtering should only return user&apos;s own service requests" name="Dashboard Service Role Filtering Tests USER Role Data Filtering should only return user&apos;s own service requests" time="0.006">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests USER Role Data Filtering should not include other users&apos; data in USER role" name="Dashboard Service Role Filtering Tests USER Role Data Filtering should not include other users&apos; data in USER role" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests OPERATOR Role Data Filtering should include both own requests and assigned requests" name="Dashboard Service Role Filtering Tests OPERATOR Role Data Filtering should include both own requests and assigned requests" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests OPERATOR Role Data Filtering should filter assignments by operator ID" name="Dashboard Service Role Filtering Tests OPERATOR Role Data Filtering should filter assignments by operator ID" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests MANAGER Role Data Filtering should access all service requests without user filtering" name="Dashboard Service Role Filtering Tests MANAGER Role Data Filtering should access all service requests without user filtering" time="0.003">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests MANAGER Role Data Filtering should respect date range filtering for managers" name="Dashboard Service Role Filtering Tests MANAGER Role Data Filtering should respect date range filtering for managers" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests ADMIN Role Data Filtering should access all data including user management" name="Dashboard Service Role Filtering Tests ADMIN Role Data Filtering should access all data including user management" time="0.001">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests ADMIN Role Data Filtering should not filter by userId for admin queries" name="Dashboard Service Role Filtering Tests ADMIN Role Data Filtering should not filter by userId for admin queries" time="0.047">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests Cross-Role Data Isolation should prevent USER from accessing other users&apos; data" name="Dashboard Service Role Filtering Tests Cross-Role Data Isolation should prevent USER from accessing other users&apos; data" time="0.005">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests Cross-Role Data Isolation should prevent OPERATOR from accessing unassigned requests" name="Dashboard Service Role Filtering Tests Cross-Role Data Isolation should prevent OPERATOR from accessing unassigned requests" time="0.008">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests Cross-Role Data Isolation should ensure role-specific data boundaries" name="Dashboard Service Role Filtering Tests Cross-Role Data Isolation should ensure role-specific data boundaries" time="0.005">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests Security Validation should reject invalid role types" name="Dashboard Service Role Filtering Tests Security Validation should reject invalid role types" time="0.019">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests Security Validation should validate user ID is not empty" name="Dashboard Service Role Filtering Tests Security Validation should validate user ID is not empty" time="0.002">
    </testcase>
    <testcase classname="Dashboard Service Role Filtering Tests Security Validation should handle SQL injection attempts safely" name="Dashboard Service Role Filtering Tests Security Validation should handle SQL injection attempts safely" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DashboardService" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:53" time="0.109" tests="19">
    <testcase classname="DashboardService Constructor should initialize with default logger if none provided" name="DashboardService Constructor should initialize with default logger if none provided" time="0">
    </testcase>
    <testcase classname="DashboardService Constructor should initialize with provided logger" name="DashboardService Constructor should initialize with provided logger" time="0">
    </testcase>
    <testcase classname="DashboardService getDashboardData should validate required parameters" name="DashboardService getDashboardData should validate required parameters" time="0.008">
    </testcase>
    <testcase classname="DashboardService getDashboardData should handle invalid user role" name="DashboardService getDashboardData should handle invalid user role" time="0.014">
    </testcase>
    <testcase classname="DashboardService getDashboardData should return cached data when caching is enabled" name="DashboardService getDashboardData should return cached data when caching is enabled" time="0.002">
    </testcase>
    <testcase classname="DashboardService USER Role Dashboard Data should return USER dashboard data with correct structure" name="DashboardService USER Role Dashboard Data should return USER dashboard data with correct structure" time="0.001">
    </testcase>
    <testcase classname="DashboardService USER Role Dashboard Data should filter requests by userId for USER role" name="DashboardService USER Role Dashboard Data should filter requests by userId for USER role" time="0.001">
    </testcase>
    <testcase classname="DashboardService OPERATOR Role Dashboard Data should return OPERATOR dashboard data with assignments" name="DashboardService OPERATOR Role Dashboard Data should return OPERATOR dashboard data with assignments" time="0.002">
    </testcase>
    <testcase classname="DashboardService OPERATOR Role Dashboard Data should include both assigned and own requests for OPERATOR" name="DashboardService OPERATOR Role Dashboard Data should include both assigned and own requests for OPERATOR" time="0.001">
    </testcase>
    <testcase classname="DashboardService MANAGER Role Dashboard Data should return MANAGER dashboard data with revenue stats" name="DashboardService MANAGER Role Dashboard Data should return MANAGER dashboard data with revenue stats" time="0.001">
    </testcase>
    <testcase classname="DashboardService MANAGER Role Dashboard Data should handle date range filtering for MANAGER" name="DashboardService MANAGER Role Dashboard Data should handle date range filtering for MANAGER" time="0.001">
    </testcase>
    <testcase classname="DashboardService ADMIN Role Dashboard Data should return ADMIN dashboard data with all sections" name="DashboardService ADMIN Role Dashboard Data should return ADMIN dashboard data with all sections" time="0.002">
    </testcase>
    <testcase classname="DashboardService Cache Management should clear cache by pattern" name="DashboardService Cache Management should clear cache by pattern" time="0">
    </testcase>
    <testcase classname="DashboardService Cache Management should clear all cache when no pattern provided" name="DashboardService Cache Management should clear all cache when no pattern provided" time="0.004">
    </testcase>
    <testcase classname="DashboardService Cache Management should return null for expired cache" name="DashboardService Cache Management should return null for expired cache" time="0">
    </testcase>
    <testcase classname="DashboardService Mobile Compatibility should support offline mode" name="DashboardService Mobile Compatibility should support offline mode" time="0.001">
    </testcase>
    <testcase classname="DashboardService Mobile Compatibility should provide cached data for offline access" name="DashboardService Mobile Compatibility should provide cached data for offline access" time="0">
    </testcase>
    <testcase classname="DashboardService Error Handling should handle database errors gracefully" name="DashboardService Error Handling should handle database errors gracefully" time="0.002">
    </testcase>
    <testcase classname="DashboardService Error Handling should validate required options" name="DashboardService Error Handling should validate required options" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Auth Utils" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:50" time="2.963" tests="23">
    <testcase classname="Auth Utils Password hashing and verification should hash a password" name="Auth Utils Password hashing and verification should hash a password" time="0.389">
    </testcase>
    <testcase classname="Auth Utils Password hashing and verification should verify a correct password" name="Auth Utils Password hashing and verification should verify a correct password" time="0.972">
    </testcase>
    <testcase classname="Auth Utils Password hashing and verification should reject an incorrect password" name="Auth Utils Password hashing and verification should reject an incorrect password" time="1.296">
    </testcase>
    <testcase classname="Auth Utils JWT token generation should generate an access token" name="Auth Utils JWT token generation should generate an access token" time="0.004">
    </testcase>
    <testcase classname="Auth Utils JWT token generation should generate a refresh token" name="Auth Utils JWT token generation should generate a refresh token" time="0.002">
    </testcase>
    <testcase classname="Auth Utils JWT token generation should generate valid tokens consistently" name="Auth Utils JWT token generation should generate valid tokens consistently" time="0.002">
    </testcase>
    <testcase classname="Auth Utils JWT token verification should verify a valid access token" name="Auth Utils JWT token verification should verify a valid access token" time="0.001">
    </testcase>
    <testcase classname="Auth Utils JWT token verification should verify a valid refresh token" name="Auth Utils JWT token verification should verify a valid refresh token" time="0.002">
    </testcase>
    <testcase classname="Auth Utils JWT token verification should return null for invalid token" name="Auth Utils JWT token verification should return null for invalid token" time="0">
    </testcase>
    <testcase classname="Auth Utils JWT token verification should return null for malformed token" name="Auth Utils JWT token verification should return null for malformed token" time="0">
    </testcase>
    <testcase classname="Auth Utils JWT token verification should return null for empty token" name="Auth Utils JWT token verification should return null for empty token" time="0">
    </testcase>
    <testcase classname="Auth Utils Bearer token extraction should extract token from valid Bearer header" name="Auth Utils Bearer token extraction should extract token from valid Bearer header" time="0">
    </testcase>
    <testcase classname="Auth Utils Bearer token extraction should return null for missing Bearer prefix" name="Auth Utils Bearer token extraction should return null for missing Bearer prefix" time="0">
    </testcase>
    <testcase classname="Auth Utils Bearer token extraction should return null for null header" name="Auth Utils Bearer token extraction should return null for null header" time="0">
    </testcase>
    <testcase classname="Auth Utils Bearer token extraction should return null for empty header" name="Auth Utils Bearer token extraction should return null for empty header" time="0">
    </testcase>
    <testcase classname="Auth Utils Bearer token extraction should handle Bearer with extra spaces" name="Auth Utils Bearer token extraction should handle Bearer with extra spaces" time="0">
    </testcase>
    <testcase classname="Auth Utils Token expiration checking should detect expired token" name="Auth Utils Token expiration checking should detect expired token" time="0">
    </testcase>
    <testcase classname="Auth Utils Token expiration checking should detect valid token" name="Auth Utils Token expiration checking should detect valid token" time="0">
    </testcase>
    <testcase classname="Auth Utils Token expiration checking should consider token expired if no exp field" name="Auth Utils Token expiration checking should consider token expired if no exp field" time="0">
    </testcase>
    <testcase classname="Auth Utils Token expiration checking should apply 30 second buffer for expiration" name="Auth Utils Token expiration checking should apply 30 second buffer for expiration" time="0">
    </testcase>
    <testcase classname="Auth Utils Token expiration checking should not expire token with sufficient time remaining" name="Auth Utils Token expiration checking should not expire token with sufficient time remaining" time="0">
    </testcase>
    <testcase classname="Auth Utils Integration tests should create and verify token end-to-end" name="Auth Utils Integration tests should create and verify token end-to-end" time="0.001">
    </testcase>
    <testcase classname="Auth Utils Integration tests should handle token lifecycle correctly" name="Auth Utils Integration tests should handle token lifecycle correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="UserAuthForm" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:50" time="3.143" tests="21">
    <testcase classname="UserAuthForm Login Mode should render login form by default" name="UserAuthForm Login Mode should render login form by default" time="0.101">
    </testcase>
    <testcase classname="UserAuthForm Login Mode should handle successful login" name="UserAuthForm Login Mode should handle successful login" time="0.153">
    </testcase>
    <testcase classname="UserAuthForm Login Mode should handle login error" name="UserAuthForm Login Mode should handle login error" time="0.133">
    </testcase>
    <testcase classname="UserAuthForm Login Mode should validate required fields in login" name="UserAuthForm Login Mode should validate required fields in login" time="0.021">
    </testcase>
    <testcase classname="UserAuthForm Login Mode should validate email format in login" name="UserAuthForm Login Mode should validate email format in login" time="0.111">
    </testcase>
    <testcase classname="UserAuthForm Login Mode should validate password requirement in login" name="UserAuthForm Login Mode should validate password requirement in login" time="0.071">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should render registration form" name="UserAuthForm Register Mode should render registration form" time="0.007">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should handle successful registration and auto-login" name="UserAuthForm Register Mode should handle successful registration and auto-login" time="0.306">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should handle registration failure" name="UserAuthForm Register Mode should handle registration failure" time="0.244">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should handle auto-login failure after successful registration" name="UserAuthForm Register Mode should handle auto-login failure after successful registration" time="0.24">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should validate all required fields in registration" name="UserAuthForm Register Mode should validate all required fields in registration" time="0.026">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should validate password strength in registration" name="UserAuthForm Register Mode should validate password strength in registration" time="0.177">
    </testcase>
    <testcase classname="UserAuthForm Register Mode should validate password confirmation match" name="UserAuthForm Register Mode should validate password confirmation match" time="0.286">
    </testcase>
    <testcase classname="UserAuthForm Loading States should show loading state during login" name="UserAuthForm Loading States should show loading state during login" time="0.153">
    </testcase>
    <testcase classname="UserAuthForm Loading States should show loading state during registration" name="UserAuthForm Loading States should show loading state during registration" time="0.315">
    </testcase>
    <testcase classname="UserAuthForm Loading States should disable form fields during loading" name="UserAuthForm Loading States should disable form fields during loading" time="0.12">
    </testcase>
    <testcase classname="UserAuthForm Accessibility should have proper form labels" name="UserAuthForm Accessibility should have proper form labels" time="0.011">
    </testcase>
    <testcase classname="UserAuthForm Accessibility should show error messages for form validation" name="UserAuthForm Accessibility should show error messages for form validation" time="0.019">
    </testcase>
    <testcase classname="UserAuthForm Accessibility should have proper button text for each mode" name="UserAuthForm Accessibility should have proper button text for each mode" time="0.009">
    </testcase>
    <testcase classname="UserAuthForm Email Normalization should normalize email to lowercase in login" name="UserAuthForm Email Normalization should normalize email to lowercase in login" time="0.075">
    </testcase>
    <testcase classname="UserAuthForm Email Normalization should send email as entered in registration (normalization happens server-side)" name="UserAuthForm Email Normalization should send email as entered in registration (normalization happens server-side)" time="0.128">
    </testcase>
  </testsuite>
  <testsuite name="ServiceRequestOperations" errors="0" failures="0" skipped="0" timestamp="2025-09-26T02:11:50" time="3.402" tests="29">
    <testcase classname="ServiceRequestOperations Component Rendering should render the operations dropdown menu" name="ServiceRequestOperations Component Rendering should render the operations dropdown menu" time="0.085">
    </testcase>
    <testcase classname="ServiceRequestOperations Component Rendering should show menu items when dropdown is opened" name="ServiceRequestOperations Component Rendering should show menu items when dropdown is opened" time="0.078">
    </testcase>
    <testcase classname="ServiceRequestOperations Component Rendering should have correct navigation links" name="ServiceRequestOperations Component Rendering should have correct navigation links" time="0.047">
    </testcase>
    <testcase classname="ServiceRequestOperations Component Rendering should show delete option with destructive styling" name="ServiceRequestOperations Component Rendering should show delete option with destructive styling" time="0.047">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Confirmation Dialog should show delete confirmation dialog when delete is clicked" name="ServiceRequestOperations Delete Confirmation Dialog should show delete confirmation dialog when delete is clicked" time="0.074">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Confirmation Dialog should show cancel and delete buttons in dialog" name="ServiceRequestOperations Delete Confirmation Dialog should show cancel and delete buttons in dialog" time="0.073">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Confirmation Dialog should close dialog when cancel is clicked" name="ServiceRequestOperations Delete Confirmation Dialog should close dialog when cancel is clicked" time="0.096">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Confirmation Dialog should include service request title in confirmation message" name="ServiceRequestOperations Delete Confirmation Dialog should include service request title in confirmation message" time="0.066">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Functionality should successfully delete service request" name="ServiceRequestOperations Delete Functionality should successfully delete service request" time="0.15">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Functionality should show loading state during deletion" name="ServiceRequestOperations Delete Functionality should show loading state during deletion" time="0.228">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Functionality should show success toast and refresh on successful deletion" name="ServiceRequestOperations Delete Functionality should show success toast and refresh on successful deletion" time="0.127">
    </testcase>
    <testcase classname="ServiceRequestOperations Delete Functionality should close dialog on successful deletion" name="ServiceRequestOperations Delete Functionality should close dialog on successful deletion" time="0.12">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should show error toast for 403 unauthorized" name="ServiceRequestOperations Error Handling should show error toast for 403 unauthorized" time="0.13">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should show error toast for 404 not found" name="ServiceRequestOperations Error Handling should show error toast for 404 not found" time="0.198">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should show error toast for 500 server error" name="ServiceRequestOperations Error Handling should show error toast for 500 server error" time="0.152">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should show generic error toast for other HTTP errors" name="ServiceRequestOperations Error Handling should show generic error toast for other HTTP errors" time="0.159">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should show network error toast for fetch failures" name="ServiceRequestOperations Error Handling should show network error toast for fetch failures" time="0.246">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should not close dialog on error" name="ServiceRequestOperations Error Handling should not close dialog on error" time="0.139">
    </testcase>
    <testcase classname="ServiceRequestOperations Error Handling should not refresh router on error" name="ServiceRequestOperations Error Handling should not refresh router on error" time="0.199">
    </testcase>
    <testcase classname="ServiceRequestOperations Loading States should show trash icon when not loading" name="ServiceRequestOperations Loading States should show trash icon when not loading" time="0.059">
    </testcase>
    <testcase classname="ServiceRequestOperations Loading States should switch to spinner during loading" name="ServiceRequestOperations Loading States should switch to spinner during loading" time="0.064">
    </testcase>
    <testcase classname="ServiceRequestOperations Loading States should reset loading state after error" name="ServiceRequestOperations Loading States should reset loading state after error" time="0.063">
    </testcase>
    <testcase classname="ServiceRequestOperations Accessibility should have proper ARIA labels and roles" name="ServiceRequestOperations Accessibility should have proper ARIA labels and roles" time="0.003">
    </testcase>
    <testcase classname="ServiceRequestOperations Accessibility should handle keyboard navigation" name="ServiceRequestOperations Accessibility should handle keyboard navigation" time="0.019">
    </testcase>
    <testcase classname="ServiceRequestOperations Accessibility should maintain focus management in dialog" name="ServiceRequestOperations Accessibility should maintain focus management in dialog" time="0.048">
    </testcase>
    <testcase classname="ServiceRequestOperations Edge Cases should handle service request with special characters in title" name="ServiceRequestOperations Edge Cases should handle service request with special characters in title" time="0.053">
    </testcase>
    <testcase classname="ServiceRequestOperations Edge Cases should handle very long service request titles" name="ServiceRequestOperations Edge Cases should handle very long service request titles" time="0.052">
    </testcase>
    <testcase classname="ServiceRequestOperations Edge Cases should handle empty service request title" name="ServiceRequestOperations Edge Cases should handle empty service request title" time="0.044">
    </testcase>
    <testcase classname="ServiceRequestOperations Edge Cases should prevent event default on delete button click" name="ServiceRequestOperations Edge Cases should prevent event default on delete button click" time="0.069">
    </testcase>
  </testsuite>
</testsuites>