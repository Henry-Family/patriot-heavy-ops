<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="22" failures="0" errors="0" time="0.75">
  <testsuite name="UserRepository" errors="0" failures="0" skipped="21" timestamp="2025-09-23T21:54:17" time="0.291" tests="22">
    <testcase classname="UserRepository findById should find user by ID successfully" name="UserRepository findById should find user by ID successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findById should handle validation error for missing ID" name="UserRepository findById should handle validation error for missing ID" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findById should handle database errors" name="UserRepository findById should handle database errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findByEmail should find user by email successfully" name="UserRepository findByEmail should find user by email successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findByEmail should return null for non-existent email" name="UserRepository findByEmail should return null for non-existent email" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findAvailableOperators should find available operators without filters" name="UserRepository findAvailableOperators should find available operators without filters" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findAvailableOperators should find operators with location filter" name="UserRepository findAvailableOperators should find operators with location filter" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findAvailableOperators should find operators with certification filter" name="UserRepository findAvailableOperators should find operators with certification filter" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository create should create user successfully" name="UserRepository create should create user successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository create should create user with custom role" name="UserRepository create should create user with custom role" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository create should handle validation errors" name="UserRepository create should handle validation errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository update should update user successfully" name="UserRepository update should update user successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository submitOperatorApplication should submit operator application successfully" name="UserRepository submitOperatorApplication should submit operator application successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository submitOperatorApplication should handle validation errors" name="UserRepository submitOperatorApplication should handle validation errors" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository setOperatorAvailability should set operator availability successfully" name="UserRepository setOperatorAvailability should set operator availability successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository setOperatorAvailability should handle user not found" name="UserRepository setOperatorAvailability should handle user not found" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository setOperatorAvailability should handle user not being an operator" name="UserRepository setOperatorAvailability should handle user not being an operator" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository updateStripeInfo should update Stripe information successfully" name="UserRepository updateStripeInfo should update Stripe information successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository findByRole should find users by role successfully" name="UserRepository findByRole should find users by role successfully" time="0.024">
    </testcase>
    <testcase classname="UserRepository verifyEmail should verify user email successfully" name="UserRepository verifyEmail should verify user email successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository delete should delete user successfully" name="UserRepository delete should delete user successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="UserRepository count should count users successfully" name="UserRepository count should count users successfully" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>