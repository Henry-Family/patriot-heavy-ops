#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
  echo "Running ESLint on staged files..."
  # Process files individually to handle spaces and special characters safely
  echo "$STAGED_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && docker-compose exec -T app npx eslint --fix "$file"
  done
  
  echo "Running Prettier on staged files..."
  echo "$STAGED_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && docker-compose exec -T app npx prettier --write "$file"
  done
  
  echo "Running tests for related files..."
  # Pass files to Jest safely - Jest handles multiple files correctly
  docker-compose exec -T app npm test -- --bail --findRelatedTests --passWithNoTests "$STAGED_FILES"
  
  # Re-add files that may have been modified by linting/formatting
  echo "$STAGED_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && git add "$file"
  done
fi

# Check for staged JSON/MD/YAML files
STAGED_CONFIG_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(json|md|yml|yaml)$' || true)

if [ -n "$STAGED_CONFIG_FILES" ]; then
  echo "Running Prettier on config files..."
  echo "$STAGED_CONFIG_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && docker-compose exec -T app npx prettier --write "$file"
  done
  
  echo "$STAGED_CONFIG_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && git add "$file"
  done
fi

# Ensure TypeScript compilation passes - run project-wide check for reliability
if [ -n "$STAGED_FILES" ]; then
  echo "Checking TypeScript compilation..."
  docker-compose exec -T app npx tsc --noEmit || echo "Warning: TypeScript errors found in project"
fi
